

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Nov 21 08:21:22 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J94
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 1.43
    21                           ; Generated 25/07/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F67J94 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     _RPINR12_13	set	3632
    55  0000                     _RPOR22_23	set	3613
    56  0000                     _RPOR24_25	set	3614
    57  0000                     _SSP2CON3	set	3897
    58  0000                     _SSP2STAT	set	3866
    59  0000                     _SSP2CON1	set	3865
    60  0000                     _SSP2STATbits	set	3866
    61  0000                     _SSP2BUF	set	3843
    62  0000                     _TRISCbits	set	3988
    63  0000                     _TRISDbits	set	3989
    64  0000                     _OSCCON	set	4051
    65  0000                     _LATDbits	set	3980
    66                           
    67                           	psect	smallconst
    68  000E00                     __psmallconst:
    69                           	opt stack 0
    70  000E00  00                 	db	0
    71  000E01                     STR_1:
    72                           
    73                           ; BSR set to: 15
    74  000E01  48                 	db	72	;'H'
    75  000E02  65                 	db	101	;'e'
    76  000E03  6C                 	db	108	;'l'
    77  000E04  6C                 	db	108	;'l'
    78  000E05  6F                 	db	111	;'o'
    79  000E06  20                 	db	32
    80  000E07  77                 	db	119	;'w'
    81  000E08  6F                 	db	111	;'o'
    82  000E09  72                 	db	114	;'r'
    83  000E0A  6C                 	db	108	;'l'
    84  000E0B  64                 	db	100	;'d'
    85  000E0C  00                 	db	0
    86                           
    87                           ; #config settings
    88  000E0D  00                 	db	0	; dummy byte at the end
    89  0000                     
    90                           	psect	cinit
    91  001012                     __pcinit:
    92                           	opt stack 0
    93  001012                     start_initialization:
    94                           	opt stack 0
    95  001012                     __initialization:
    96                           	opt stack 0
    97  001012                     end_of_initialization:
    98                           	opt stack 0
    99  001012                     __end_of__initialization:
   100                           	opt stack 0
   101  001012  0E00               	movlw	low (__Lsmallconst shr (0+16))
   102  001014  6EF8               	movwf	tblptru,c
   103  001016  0E0E               	movlw	high __Lsmallconst
   104  001018  6EF7               	movwf	tblptrh,c
   105  00101A  0100               	movlb	0
   106  00101C  EFC7  F007         	goto	_main	;jump to C main() function
   107                           tblptru	equ	0xFF8
   108                           tblptrh	equ	0xFF7
   109                           
   110                           	psect	cstackCOMRAM
   111  000001                     __pcstackCOMRAM:
   112                           	opt stack 0
   113  000001                     ??_initialisation_PORT:
   114  000001                     spi_Send_Read@byte:
   115                           	opt stack 0
   116                           
   117                           ; 1 bytes @ 0x0
   118  000001                     	ds	1
   119  000002                     readBusyFlag@retValue:
   120                           	opt stack 0
   121                           
   122                           ; 1 bytes @ 0x1
   123  000002                     	ds	1
   124  000003                     ??_putchLCD:
   125  000003                     displayCtrl@cursor:
   126                           	opt stack 0
   127                           
   128                           ; 1 bytes @ 0x2
   129  000003                     	ds	1
   130  000004                     displayCtrl@blink:
   131                           	opt stack 0
   132                           
   133                           ; 1 bytes @ 0x3
   134  000004                     	ds	1
   135  000005                     displayCtrl@display:
   136                           	opt stack 0
   137  000005                     putchLCD@input:
   138                           	opt stack 0
   139                           
   140                           ; 1 bytes @ 0x4
   141  000005                     	ds	1
   142  000006                     displayCtrl@BCD:
   143                           	opt stack 0
   144  000006                     putStringLCD@input:
   145                           	opt stack 0
   146                           
   147                           ; 2 bytes @ 0x5
   148  000006                     	ds	2
   149  000008                     ??_putStringLCD:
   150                           
   151                           ; 1 bytes @ 0x7
   152  000008                     	ds	2
   153  00000A                     putStringLCD@i:
   154                           	opt stack 0
   155                           
   156                           ; 2 bytes @ 0x9
   157  00000A                     	ds	2
   158  00000C                     main@status:
   159                           	opt stack 0
   160                           
   161                           ; 1 bytes @ 0xB
   162  00000C                     	ds	1
   163                           tblptru	equ	0xFF8
   164                           tblptrh	equ	0xFF7
   165                           
   166 ;;
   167 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   168 ;;
   169 ;; *************** function _main *****************
   170 ;; Defined at:
   171 ;;		line 4 in file "main.c"
   172 ;; Parameters:    Size  Location     Type
   173 ;;		None
   174 ;; Auto vars:     Size  Location     Type
   175 ;;  data            5    0        unsigned char [5]
   176 ;;  i               2    0        int 
   177 ;;  status          1   11[COMRAM] unsigned char 
   178 ;; Return value:  Size  Location     Type
   179 ;;                  1    wreg      void 
   180 ;; Registers used:
   181 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   182 ;; Tracked objects:
   183 ;;		On entry : 0/0
   184 ;;		On exit  : 0/0
   185 ;;		Unchanged: 0/0
   186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   188 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   190 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   191 ;;Total ram usage:        1 bytes
   192 ;; Hardware stack levels required when called:    4
   193 ;; This function calls:
   194 ;;		_clearDisplay
   195 ;;		_displayCtrl
   196 ;;		_initialisation_PORT
   197 ;;		_initialisation_SPI
   198 ;;		_putStringLCD
   199 ;;		_readBusyFlag
   200 ;; This function is called by:
   201 ;;		Startup code after reset
   202 ;; This function uses a non-reentrant model
   203 ;;
   204                           
   205                           	psect	text0
   206  000F8E                     __ptext0:
   207                           	opt stack 0
   208  000F8E                     _main:
   209                           	opt stack 27
   210                           
   211                           ;main.c: 6: unsigned char status = 0;
   212                           
   213                           ;incstack = 0
   214  000F8E  0E00               	movlw	0
   215  000F90  6E0C               	movwf	main@status,c
   216                           
   217                           ;main.c: 7: unsigned char data[5];
   218                           ;main.c: 8: int i;
   219                           ;main.c: 13: initialisation_SPI();
   220  000F92  ECA8  F007         	call	_initialisation_SPI	;wreg free
   221                           
   222                           ;main.c: 14: initialisation_PORT();
   223  000F96  EC88  F007         	call	_initialisation_PORT	;wreg free
   224  000F9A  ECF3  F007         	call	_readBusyFlag	;wreg free
   225  000F9E  0900               	iorlw	0
   226  000FA0  A4D8               	btfss	status,2,c
   227  000FA2  D7FB               	goto	l18
   228                           
   229                           ;main.c: 20: clearDisplay();
   230  000FA4  ECE2  F007         	call	_clearDisplay	;wreg free
   231                           
   232                           ;main.c: 21: displayCtrl(1,1,0);
   233  000FA8  0E01               	movlw	1
   234  000FAA  6E03               	movwf	displayCtrl@cursor,c
   235  000FAC  0E00               	movlw	0
   236  000FAE  6E04               	movwf	displayCtrl@blink,c
   237  000FB0  0E01               	movlw	1
   238  000FB2  EC66  F007         	call	_displayCtrl
   239                           
   240                           ;main.c: 22: putStringLCD("Hello world");
   241  000FB6  0E01               	movlw	low STR_1
   242  000FB8  6E06               	movwf	putStringLCD@input,c
   243  000FBA  0E0E               	movlw	high STR_1
   244  000FBC  6E07               	movwf	putStringLCD@input+1,c
   245  000FBE  EC41  F007         	call	_putStringLCD	;wreg free
   246  000FC2                     l20:
   247                           
   248                           ;main.c: 24: {
   249  000FC2  D7FF               	goto	l20
   250  000FC4                     __end_of_main:
   251                           	opt stack 0
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           status	equ	0xFD8
   255                           
   256 ;; *************** function _putStringLCD *****************
   257 ;; Defined at:
   258 ;;		line 49 in file "LCD_SPI.c"
   259 ;; Parameters:    Size  Location     Type
   260 ;;  input           2    5[COMRAM] PTR unsigned char 
   261 ;;		 -> STR_1(12), 
   262 ;; Auto vars:     Size  Location     Type
   263 ;;  i               2    9[COMRAM] int 
   264 ;; Return value:  Size  Location     Type
   265 ;;                  1    wreg      void 
   266 ;; Registers used:
   267 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   268 ;; Tracked objects:
   269 ;;		On entry : 0/0
   270 ;;		On exit  : 0/0
   271 ;;		Unchanged: 0/0
   272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   273 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   274 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   275 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   276 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   277 ;;Total ram usage:        6 bytes
   278 ;; Hardware stack levels used:    1
   279 ;; Hardware stack levels required when called:    3
   280 ;; This function calls:
   281 ;;		_putchLCD
   282 ;; This function is called by:
   283 ;;		_main
   284 ;; This function uses a non-reentrant model
   285 ;;
   286                           
   287                           	psect	text1
   288  000E82                     __ptext1:
   289                           	opt stack 0
   290  000E82                     _putStringLCD:
   291                           	opt stack 27
   292                           
   293                           ;LCD_SPI.c: 51: int i;
   294                           ;LCD_SPI.c: 52: for (i = 0; input[i] != '\0'; i++)
   295                           
   296                           ;incstack = 0
   297  000E82  0E00               	movlw	0
   298  000E84  6E0B               	movwf	putStringLCD@i+1,c
   299  000E86  0E00               	movlw	0
   300  000E88  6E0A               	movwf	putStringLCD@i,c
   301  000E8A  D010               	goto	l76
   302  000E8C                     
   303                           ;LCD_SPI.c: 53: {
   304                           ;LCD_SPI.c: 54: putchLCD(input[i]);
   305  000E8C  500A               	movf	putStringLCD@i,w,c
   306  000E8E  2406               	addwf	putStringLCD@input,w,c
   307  000E90  6E08               	movwf	??_putStringLCD& (0+255),c
   308  000E92  500B               	movf	putStringLCD@i+1,w,c
   309  000E94  2007               	addwfc	putStringLCD@input+1,w,c
   310  000E96  6E09               	movwf	(??_putStringLCD+1)& (0+255),c
   311  000E98  C008  FFF6         	movff	??_putStringLCD,tblptrl
   312  000E9C  C009  FFF7         	movff	??_putStringLCD+1,tblptrh
   313  000EA0                     	if	0	;tblptru may be non-zero
   314  000EA0                     	endif
   315  000EA0                     	if	0	;tblptru may be non-zero
   316  000EA0                     	endif
   317  000EA0  0008               	tblrd		*
   318  000EA2  50F5               	movf	tablat,w,c
   319  000EA4  EC07  F007         	call	_putchLCD
   320  000EA8  4A0A               	infsnz	putStringLCD@i,f,c
   321  000EAA  2A0B               	incf	putStringLCD@i+1,f,c
   322  000EAC                     l76:
   323  000EAC  500A               	movf	putStringLCD@i,w,c
   324  000EAE  2406               	addwf	putStringLCD@input,w,c
   325  000EB0  6E08               	movwf	??_putStringLCD& (0+255),c
   326  000EB2  500B               	movf	putStringLCD@i+1,w,c
   327  000EB4  2007               	addwfc	putStringLCD@input+1,w,c
   328  000EB6  6E09               	movwf	(??_putStringLCD+1)& (0+255),c
   329  000EB8  C008  FFF6         	movff	??_putStringLCD,tblptrl
   330  000EBC  C009  FFF7         	movff	??_putStringLCD+1,tblptrh
   331  000EC0                     	if	0	;tblptru may be non-zero
   332  000EC0                     	endif
   333  000EC0                     	if	0	;tblptru may be non-zero
   334  000EC0                     	endif
   335  000EC0  0008               	tblrd		*
   336  000EC2  50F5               	movf	tablat,w,c
   337  000EC4  0900               	iorlw	0
   338  000EC6  B4D8               	btfsc	status,2,c
   339  000EC8  0012               	return	
   340  000ECA  D7E0               	goto	l77
   341  000ECC                     __end_of_putStringLCD:
   342                           	opt stack 0
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           tblptrl	equ	0xFF6
   346                           tablat	equ	0xFF5
   347                           status	equ	0xFD8
   348                           
   349 ;; *************** function _putchLCD *****************
   350 ;; Defined at:
   351 ;;		line 58 in file "LCD_SPI.c"
   352 ;; Parameters:    Size  Location     Type
   353 ;;  input           1    wreg     unsigned char 
   354 ;; Auto vars:     Size  Location     Type
   355 ;;  input           1    4[COMRAM] unsigned char 
   356 ;; Return value:  Size  Location     Type
   357 ;;                  1    wreg      void 
   358 ;; Registers used:
   359 ;;		wreg, status,2, status,0, cstack
   360 ;; Tracked objects:
   361 ;;		On entry : 0/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   366 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   367 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   368 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   369 ;;Total ram usage:        3 bytes
   370 ;; Hardware stack levels used:    1
   371 ;; Hardware stack levels required when called:    2
   372 ;; This function calls:
   373 ;;		_readBusyFlag
   374 ;;		_spi_Send_Read
   375 ;; This function is called by:
   376 ;;		_putStringLCD
   377 ;; This function uses a non-reentrant model
   378 ;;
   379                           
   380                           	psect	text2
   381  000E0E                     __ptext2:
   382                           	opt stack 0
   383  000E0E                     _putchLCD:
   384                           	opt stack 27
   385                           
   386                           ;incstack = 0
   387                           ;putchLCD@input stored from wreg
   388  000E0E  6E05               	movwf	putchLCD@input,c
   389                           
   390                           ;LCD_SPI.c: 60: input = (input & 0xF0) >> 4 | (input & 0x0F) << 4;
   391  000E10  C005  F003         	movff	putchLCD@input,??_putchLCD
   392  000E14  0E0F               	movlw	15
   393  000E16  1603               	andwf	??_putchLCD,f,c
   394  000E18  3A03               	swapf	??_putchLCD,f,c
   395  000E1A  0EF0               	movlw	240
   396  000E1C  1603               	andwf	??_putchLCD,f,c
   397  000E1E  3805               	swapf	putchLCD@input,w,c
   398  000E20  0B0F               	andlw	15
   399  000E22  0B0F               	andlw	15
   400  000E24  1003               	iorwf	??_putchLCD,w,c
   401  000E26  6E05               	movwf	putchLCD@input,c
   402                           
   403                           ;LCD_SPI.c: 61: input = (input & 0xCC) >> 2 | (input & 0x33) << 2;
   404  000E28  C005  F003         	movff	putchLCD@input,??_putchLCD
   405  000E2C  0E33               	movlw	51
   406  000E2E  1603               	andwf	??_putchLCD,f,c
   407  000E30  90D8               	bcf	status,0,c
   408  000E32  3603               	rlcf	??_putchLCD,f,c
   409  000E34  90D8               	bcf	status,0,c
   410  000E36  3603               	rlcf	??_putchLCD,f,c
   411  000E38  4005               	rrncf	putchLCD@input,w,c
   412  000E3A  42E8               	rrncf	wreg,f,c
   413  000E3C  0B3F               	andlw	63
   414  000E3E  0B33               	andlw	51
   415  000E40  1003               	iorwf	??_putchLCD,w,c
   416  000E42  6E05               	movwf	putchLCD@input,c
   417                           
   418                           ;LCD_SPI.c: 62: input = (input & 0xAA) >> 1 | (input & 0x55) << 1;
   419  000E44  C005  F003         	movff	putchLCD@input,??_putchLCD
   420  000E48  0E55               	movlw	85
   421  000E4A  1603               	andwf	??_putchLCD,f,c
   422  000E4C  90D8               	bcf	status,0,c
   423  000E4E  3403               	rlcf	??_putchLCD,w,c
   424  000E50  6E04               	movwf	(??_putchLCD+1)& (0+255),c
   425  000E52  90D8               	bcf	status,0,c
   426  000E54  3005               	rrcf	putchLCD@input,w,c
   427  000E56  0B55               	andlw	85
   428  000E58  1004               	iorwf	??_putchLCD+1,w,c
   429  000E5A  6E05               	movwf	putchLCD@input,c
   430  000E5C  ECF3  F007         	call	_readBusyFlag	;wreg free
   431  000E60  0900               	iorlw	0
   432  000E62  A4D8               	btfss	status,2,c
   433  000E64  D7FB               	goto	l83
   434                           
   435                           ;LCD_SPI.c: 65: LATDbits.LATD3 = 0;
   436  000E66  968C               	bcf	3980,3,c	;volatile
   437                           
   438                           ;LCD_SPI.c: 66: spi_Send_Read(0xFA);
   439  000E68  0EFA               	movlw	250
   440  000E6A  EC00  F008         	call	_spi_Send_Read
   441                           
   442                           ;LCD_SPI.c: 67: spi_Send_Read(input & 0xF0);
   443  000E6E  5005               	movf	putchLCD@input,w,c
   444  000E70  0BF0               	andlw	240
   445  000E72  EC00  F008         	call	_spi_Send_Read
   446                           
   447                           ;LCD_SPI.c: 68: spi_Send_Read(input << 4);
   448  000E76  3805               	swapf	putchLCD@input,w,c
   449  000E78  0BF0               	andlw	240
   450  000E7A  EC00  F008         	call	_spi_Send_Read
   451                           
   452                           ;LCD_SPI.c: 69: LATDbits.LATD3 = 1;
   453  000E7E  868C               	bsf	3980,3,c	;volatile
   454  000E80  0012               	return		;funcret
   455  000E82                     __end_of_putchLCD:
   456                           	opt stack 0
   457                           tblptru	equ	0xFF8
   458                           tblptrh	equ	0xFF7
   459                           tblptrl	equ	0xFF6
   460                           tablat	equ	0xFF5
   461                           wreg	equ	0xFE8
   462                           status	equ	0xFD8
   463                           
   464 ;; *************** function _initialisation_SPI *****************
   465 ;; Defined at:
   466 ;;		line 92 in file "LCD_SPI.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;		None
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		wreg, status,2, status,0
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   484 ;;Total ram usage:        0 bytes
   485 ;; Hardware stack levels used:    1
   486 ;; This function calls:
   487 ;;		Nothing
   488 ;; This function is called by:
   489 ;;		_main
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           	psect	text3
   494  000F50                     __ptext3:
   495                           	opt stack 0
   496  000F50                     _initialisation_SPI:
   497                           	opt stack 30
   498                           
   499                           ;LCD_SPI.c: 96: RPOR24_25 |= 0x04;
   500                           
   501                           ;incstack = 0
   502  000F50  010E               	movlb	14	; () banked
   503  000F52  851E               	bsf	30,2,b	;volatile
   504                           
   505                           ; BSR set to: 14
   506                           ;LCD_SPI.c: 97: RPOR24_25 &= 0xF4;
   507  000F54  0EF4               	movlw	244
   508  000F56  010E               	movlb	14	; () banked
   509  000F58  171E               	andwf	30,f,b	;volatile
   510                           
   511                           ; BSR set to: 14
   512                           ;LCD_SPI.c: 99: RPOR22_23 |= 0x05;
   513  000F5A  0E05               	movlw	5
   514  000F5C  010E               	movlb	14	; () banked
   515  000F5E  131D               	iorwf	29,f,b	;volatile
   516                           
   517                           ; BSR set to: 14
   518                           ;LCD_SPI.c: 100: RPOR22_23 &= 0xF5;
   519  000F60  0EF5               	movlw	245
   520  000F62  010E               	movlb	14	; () banked
   521  000F64  171D               	andwf	29,f,b	;volatile
   522                           
   523                           ; BSR set to: 14
   524                           ;LCD_SPI.c: 102: RPINR12_13 |= 0x50;
   525  000F66  0E50               	movlw	80
   526  000F68  010E               	movlb	14	; () banked
   527  000F6A  1330               	iorwf	48,f,b	;volatile
   528                           
   529                           ; BSR set to: 14
   530                           ;LCD_SPI.c: 103: RPINR12_13 &= 0x5F;
   531  000F6C  0E5F               	movlw	95
   532  000F6E  010E               	movlb	14	; () banked
   533  000F70  1730               	andwf	48,f,b	;volatile
   534                           
   535                           ; BSR set to: 14
   536                           ;LCD_SPI.c: 106: SSP2CON1 &= 0xF1;
   537  000F72  0EF1               	movlw	241
   538  000F74  010F               	movlb	15	; () banked
   539  000F76  1719               	andwf	25,f,b	;volatile
   540                           
   541                           ; BSR set to: 15
   542                           ;LCD_SPI.c: 107: SSP2CON1 |= 0x31;
   543  000F78  0E31               	movlw	49
   544  000F7A  010F               	movlb	15	; () banked
   545  000F7C  1319               	iorwf	25,f,b	;volatile
   546                           
   547                           ; BSR set to: 15
   548                           ;LCD_SPI.c: 108: SSP2STAT |= 0x80;
   549  000F7E  010F               	movlb	15	; () banked
   550  000F80  8F1A               	bsf	26,7,b	;volatile
   551                           
   552                           ; BSR set to: 15
   553                           ;LCD_SPI.c: 109: SSP2STAT &= ~0x40;
   554  000F82  010F               	movlb	15	; () banked
   555  000F84  9D1A               	bcf	26,6,b	;volatile
   556                           
   557                           ; BSR set to: 15
   558                           ;LCD_SPI.c: 110: SSP2CON3 &= 0x8F;
   559  000F86  0E8F               	movlw	143
   560  000F88  010F               	movlb	15	; () banked
   561  000F8A  1739               	andwf	57,f,b	;volatile
   562                           
   563                           ; BSR set to: 15
   564  000F8C  0012               	return		;funcret
   565  000F8E                     __end_of_initialisation_SPI:
   566                           	opt stack 0
   567                           tblptru	equ	0xFF8
   568                           tblptrh	equ	0xFF7
   569                           tblptrl	equ	0xFF6
   570                           tablat	equ	0xFF5
   571                           wreg	equ	0xFE8
   572                           status	equ	0xFD8
   573                           
   574 ;; *************** function _initialisation_PORT *****************
   575 ;; Defined at:
   576 ;;		line 114 in file "LCD_SPI.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;		None
   579 ;; Auto vars:     Size  Location     Type
   580 ;;		None
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg, status,2, status,0
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   592 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   593 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   594 ;;Total ram usage:        1 bytes
   595 ;; Hardware stack levels used:    1
   596 ;; This function calls:
   597 ;;		Nothing
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           	psect	text4
   604  000F10                     __ptext4:
   605                           	opt stack 0
   606  000F10                     _initialisation_PORT:
   607                           	opt stack 30
   608                           
   609                           ;LCD_SPI.c: 116: OSCCON = OSCCON | 0b01110000;
   610                           
   611                           ; BSR set to: 15
   612                           ;incstack = 0
   613  000F10  50D3               	movf	4051,w,c	;volatile
   614  000F12  0970               	iorlw	112
   615  000F14  6ED3               	movwf	4051,c	;volatile
   616                           
   617                           ;LCD_SPI.c: 117: TRISDbits.TRISD4 = 0;
   618  000F16  9895               	bcf	3989,4,c	;volatile
   619                           
   620                           ;LCD_SPI.c: 118: TRISDbits.TRISD2 = 0;
   621  000F18  9495               	bcf	3989,2,c	;volatile
   622                           
   623                           ;LCD_SPI.c: 119: TRISDbits.TRISD3 = 0;
   624  000F1A  9695               	bcf	3989,3,c	;volatile
   625                           
   626                           ;LCD_SPI.c: 120: TRISDbits.TRISD1 = 1;
   627  000F1C  8295               	bsf	3989,1,c	;volatile
   628                           
   629                           ;LCD_SPI.c: 121: TRISCbits.TRISC0 = 0;
   630  000F1E  9094               	bcf	3988,0,c	;volatile
   631                           
   632                           ;LCD_SPI.c: 122: LATDbits.LATD3 = 1;
   633  000F20  868C               	bsf	3980,3,c	;volatile
   634                           
   635                           ;LCD_SPI.c: 123: __nop();
   636  000F22  F000               	nop	
   637                           
   638                           ;LCD_SPI.c: 124: _delay((unsigned long)((33)*(8000000/4000.0)));
   639  000F24  0E56               	movlw	86
   640  000F26  6E01               	movwf	??_initialisation_PORT& (0+255),c
   641  000F28  0EB6               	movlw	182
   642  000F2A                     u127:
   643  000F2A  2EE8               	decfsz	wreg,f,c
   644  000F2C  D7FE               	bra	u127
   645  000F2E  2E01               	decfsz	??_initialisation_PORT& (0+255),f,c
   646  000F30  D7FC               	bra	u127
   647                           
   648                           ;LCD_SPI.c: 125: _delay((unsigned long)((33)*(8000000/4000.0)));
   649  000F32  0E56               	movlw	86
   650  000F34  6E01               	movwf	??_initialisation_PORT& (0+255),c
   651  000F36  0EB6               	movlw	182
   652  000F38                     u137:
   653  000F38  2EE8               	decfsz	wreg,f,c
   654  000F3A  D7FE               	bra	u137
   655  000F3C  2E01               	decfsz	??_initialisation_PORT& (0+255),f,c
   656  000F3E  D7FC               	bra	u137
   657                           
   658                           ;LCD_SPI.c: 126: _delay((unsigned long)((33)*(8000000/4000.0)));
   659  000F40  0E56               	movlw	86
   660  000F42  6E01               	movwf	??_initialisation_PORT& (0+255),c
   661  000F44  0EB6               	movlw	182
   662  000F46                     u147:
   663  000F46  2EE8               	decfsz	wreg,f,c
   664  000F48  D7FE               	bra	u147
   665  000F4A  2E01               	decfsz	??_initialisation_PORT& (0+255),f,c
   666  000F4C  D7FC               	bra	u147
   667  000F4E  0012               	return		;funcret
   668  000F50                     __end_of_initialisation_PORT:
   669                           	opt stack 0
   670                           tblptru	equ	0xFF8
   671                           tblptrh	equ	0xFF7
   672                           tblptrl	equ	0xFF6
   673                           tablat	equ	0xFF5
   674                           wreg	equ	0xFE8
   675                           status	equ	0xFD8
   676                           
   677 ;; *************** function _displayCtrl *****************
   678 ;; Defined at:
   679 ;;		line 31 in file "LCD_SPI.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;  display         1    wreg     unsigned char 
   682 ;;  cursor          1    2[COMRAM] unsigned char 
   683 ;;  blink           1    3[COMRAM] unsigned char 
   684 ;; Auto vars:     Size  Location     Type
   685 ;;  display         1    4[COMRAM] unsigned char 
   686 ;;  BCD             1    5[COMRAM] unsigned char 
   687 ;; Return value:  Size  Location     Type
   688 ;;                  1    wreg      void 
   689 ;; Registers used:
   690 ;;		wreg, status,2, status,0, cstack
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   696 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   697 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   699 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   700 ;;Total ram usage:        4 bytes
   701 ;; Hardware stack levels used:    1
   702 ;; Hardware stack levels required when called:    2
   703 ;; This function calls:
   704 ;;		_readBusyFlag
   705 ;;		_spi_Send_Read
   706 ;; This function is called by:
   707 ;;		_main
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           	psect	text5
   712  000ECC                     __ptext5:
   713                           	opt stack 0
   714  000ECC                     _displayCtrl:
   715                           	opt stack 28
   716                           
   717                           ;incstack = 0
   718                           ;displayCtrl@display stored from wreg
   719  000ECC  6E05               	movwf	displayCtrl@display,c
   720                           
   721                           ;LCD_SPI.c: 33: char BCD = blink;
   722  000ECE  C004  F006         	movff	displayCtrl@blink,displayCtrl@BCD
   723                           
   724                           ;LCD_SPI.c: 34: BCD <<= 1;
   725  000ED2  90D8               	bcf	status,0,c
   726  000ED4  3606               	rlcf	displayCtrl@BCD,f,c
   727                           
   728                           ;LCD_SPI.c: 35: BCD += cursor;
   729  000ED6  5003               	movf	displayCtrl@cursor,w,c
   730  000ED8  2606               	addwf	displayCtrl@BCD,f,c
   731                           
   732                           ;LCD_SPI.c: 36: BCD <<= 1;
   733  000EDA  90D8               	bcf	status,0,c
   734  000EDC  3606               	rlcf	displayCtrl@BCD,f,c
   735                           
   736                           ;LCD_SPI.c: 37: BCD += display;
   737  000EDE  5005               	movf	displayCtrl@display,w,c
   738  000EE0  2606               	addwf	displayCtrl@BCD,f,c
   739                           
   740                           ;LCD_SPI.c: 38: BCD <<= 1;
   741  000EE2  90D8               	bcf	status,0,c
   742  000EE4  3606               	rlcf	displayCtrl@BCD,f,c
   743                           
   744                           ;LCD_SPI.c: 39: BCD += 1;
   745  000EE6  2A06               	incf	displayCtrl@BCD,f,c
   746                           
   747                           ;LCD_SPI.c: 40: BCD <<= 4;
   748  000EE8  3A06               	swapf	displayCtrl@BCD,f,c
   749  000EEA  0EF0               	movlw	240
   750  000EEC  1606               	andwf	displayCtrl@BCD,f,c
   751  000EEE  ECF3  F007         	call	_readBusyFlag	;wreg free
   752  000EF2  0900               	iorlw	0
   753  000EF4  A4D8               	btfss	status,2,c
   754  000EF6  D7FB               	goto	l71
   755                           
   756                           ;LCD_SPI.c: 43: LATDbits.LATD3 = 0;
   757  000EF8  968C               	bcf	3980,3,c	;volatile
   758                           
   759                           ;LCD_SPI.c: 44: spi_Send_Read(0xF8);
   760  000EFA  0EF8               	movlw	248
   761  000EFC  EC00  F008         	call	_spi_Send_Read
   762                           
   763                           ;LCD_SPI.c: 45: spi_Send_Read(BCD);
   764  000F00  5006               	movf	displayCtrl@BCD,w,c
   765  000F02  EC00  F008         	call	_spi_Send_Read
   766                           
   767                           ;LCD_SPI.c: 46: spi_Send_Read(0x00);
   768  000F06  0E00               	movlw	0
   769  000F08  EC00  F008         	call	_spi_Send_Read
   770                           
   771                           ;LCD_SPI.c: 47: LATDbits.LATD3 = 1;
   772  000F0C  868C               	bsf	3980,3,c	;volatile
   773  000F0E  0012               	return		;funcret
   774  000F10                     __end_of_displayCtrl:
   775                           	opt stack 0
   776                           tblptru	equ	0xFF8
   777                           tblptrh	equ	0xFF7
   778                           tblptrl	equ	0xFF6
   779                           tablat	equ	0xFF5
   780                           wreg	equ	0xFE8
   781                           status	equ	0xFD8
   782                           
   783 ;; *************** function _clearDisplay *****************
   784 ;; Defined at:
   785 ;;		line 19 in file "LCD_SPI.c"
   786 ;; Parameters:    Size  Location     Type
   787 ;;		None
   788 ;; Auto vars:     Size  Location     Type
   789 ;;		None
   790 ;; Return value:  Size  Location     Type
   791 ;;                  1    wreg      void 
   792 ;; Registers used:
   793 ;;		wreg, status,2, status,0, cstack
   794 ;; Tracked objects:
   795 ;;		On entry : 0/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   803 ;;Total ram usage:        0 bytes
   804 ;; Hardware stack levels used:    1
   805 ;; Hardware stack levels required when called:    2
   806 ;; This function calls:
   807 ;;		_readBusyFlag
   808 ;;		_spi_Send_Read
   809 ;; This function is called by:
   810 ;;		_main
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           	psect	text6
   815  000FC4                     __ptext6:
   816                           	opt stack 0
   817  000FC4                     _clearDisplay:
   818                           	opt stack 28
   819                           
   820                           ;LCD_SPI.c: 21: while(readBusyFlag());
   821                           
   822                           ;incstack = 0
   823  000FC4  ECF3  F007         	call	_readBusyFlag	;wreg free
   824  000FC8  0900               	iorlw	0
   825  000FCA  A4D8               	btfss	status,2,c
   826  000FCC  D7FB               	goto	_clearDisplay
   827                           
   828                           ;LCD_SPI.c: 23: LATDbits.LATD3 = 0;
   829  000FCE  968C               	bcf	3980,3,c	;volatile
   830                           
   831                           ;LCD_SPI.c: 24: spi_Send_Read(0xF8);
   832  000FD0  0EF8               	movlw	248
   833  000FD2  EC00  F008         	call	_spi_Send_Read
   834                           
   835                           ;LCD_SPI.c: 25: spi_Send_Read(0x80);
   836  000FD6  0E80               	movlw	128
   837  000FD8  EC00  F008         	call	_spi_Send_Read
   838                           
   839                           ;LCD_SPI.c: 26: spi_Send_Read(0x00);
   840  000FDC  0E00               	movlw	0
   841  000FDE  EC00  F008         	call	_spi_Send_Read
   842                           
   843                           ;LCD_SPI.c: 27: LATDbits.LATD3 = 1;
   844  000FE2  868C               	bsf	3980,3,c	;volatile
   845  000FE4  0012               	return		;funcret
   846  000FE6                     __end_of_clearDisplay:
   847                           	opt stack 0
   848                           tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           tblptrl	equ	0xFF6
   851                           tablat	equ	0xFF5
   852                           wreg	equ	0xFE8
   853                           status	equ	0xFD8
   854                           
   855 ;; *************** function _readBusyFlag *****************
   856 ;; Defined at:
   857 ;;		line 73 in file "LCD_SPI.c"
   858 ;; Parameters:    Size  Location     Type
   859 ;;		None
   860 ;; Auto vars:     Size  Location     Type
   861 ;;  retValue        1    1[COMRAM] unsigned char 
   862 ;; Return value:  Size  Location     Type
   863 ;;                  1    wreg      unsigned char 
   864 ;; Registers used:
   865 ;;		wreg, status,2, status,0, cstack
   866 ;; Tracked objects:
   867 ;;		On entry : 0/0
   868 ;;		On exit  : 0/0
   869 ;;		Unchanged: 0/0
   870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   872 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   874 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   875 ;;Total ram usage:        1 bytes
   876 ;; Hardware stack levels used:    1
   877 ;; Hardware stack levels required when called:    1
   878 ;; This function calls:
   879 ;;		_spi_Send_Read
   880 ;; This function is called by:
   881 ;;		_main
   882 ;;		_clearDisplay
   883 ;;		_displayCtrl
   884 ;;		_putchLCD
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           	psect	text7
   889  000FE6                     __ptext7:
   890                           	opt stack 0
   891  000FE6                     _readBusyFlag:
   892                           	opt stack 29
   893                           
   894                           ;LCD_SPI.c: 75: unsigned char retValue;
   895                           ;LCD_SPI.c: 77: LATDbits.LATD3 = 0;
   896                           
   897                           ;incstack = 0
   898  000FE6  968C               	bcf	3980,3,c	;volatile
   899                           
   900                           ;LCD_SPI.c: 78: spi_Send_Read(0xFC);
   901  000FE8  0EFC               	movlw	252
   902  000FEA  EC00  F008         	call	_spi_Send_Read
   903                           
   904                           ;LCD_SPI.c: 79: retValue = spi_Send_Read(0x00);
   905  000FEE  0E00               	movlw	0
   906  000FF0  EC00  F008         	call	_spi_Send_Read
   907  000FF4  6E02               	movwf	readBusyFlag@retValue,c
   908                           
   909                           ;LCD_SPI.c: 80: LATDbits.LATD3 = 1;
   910  000FF6  868C               	bsf	3980,3,c	;volatile
   911                           
   912                           ;LCD_SPI.c: 81: _delay((unsigned long)((1)*(8000000/4000000.0)));
   913  000FF8  D000               	nop2		;2 cycle nop
   914                           
   915                           ;LCD_SPI.c: 82: return (retValue & 1);
   916  000FFA  5002               	movf	readBusyFlag@retValue,w,c
   917  000FFC  0B01               	andlw	1
   918  000FFE  0012               	return	
   919  001000                     __end_of_readBusyFlag:
   920                           	opt stack 0
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           wreg	equ	0xFE8
   926                           status	equ	0xFD8
   927                           
   928 ;; *************** function _spi_Send_Read *****************
   929 ;; Defined at:
   930 ;;		line 12 in file "LCD_SPI.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;  byte            1    wreg     unsigned char 
   933 ;; Auto vars:     Size  Location     Type
   934 ;;  byte            1    0[COMRAM] unsigned char 
   935 ;; Return value:  Size  Location     Type
   936 ;;                  1    wreg      unsigned char 
   937 ;; Registers used:
   938 ;;		wreg, status,2
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   948 ;;Total ram usage:        1 bytes
   949 ;; Hardware stack levels used:    1
   950 ;; This function calls:
   951 ;;		Nothing
   952 ;; This function is called by:
   953 ;;		_clearDisplay
   954 ;;		_displayCtrl
   955 ;;		_putchLCD
   956 ;;		_readBusyFlag
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960                           	psect	text8
   961  001000                     __ptext8:
   962                           	opt stack 0
   963  001000                     _spi_Send_Read:
   964                           	opt stack 29
   965                           
   966                           ;incstack = 0
   967                           ;spi_Send_Read@byte stored from wreg
   968  001000  6E01               	movwf	spi_Send_Read@byte,c
   969                           
   970                           ;LCD_SPI.c: 14: SSP2BUF = byte;
   971  001002  C001  FF03         	movff	spi_Send_Read@byte,3843	;volatile
   972  001006  010F               	movlb	15	; () banked
   973  001008  A11A               	btfss	26,0,b	;volatile
   974  00100A  D7FD               	goto	l59
   975                           
   976                           ; BSR set to: 15
   977                           ;LCD_SPI.c: 16: return SSP2BUF;
   978  00100C  010F               	movlb	15	; () banked
   979  00100E  5103               	movf	3,w,b	;volatile
   980                           
   981                           ; BSR set to: 15
   982  001010  0012               	return		;funcret
   983  001012                     __end_of_spi_Send_Read:
   984                           	opt stack 0
   985                           tblptru	equ	0xFF8
   986                           tblptrh	equ	0xFF7
   987                           tblptrl	equ	0xFF6
   988                           tablat	equ	0xFF5
   989                           wreg	equ	0xFE8
   990                           status	equ	0xFD8
   991                           tblptru	equ	0xFF8
   992                           tblptrh	equ	0xFF7
   993                           tblptrl	equ	0xFF6
   994                           tablat	equ	0xFF5
   995                           wreg	equ	0xFE8
   996                           status	equ	0xFD8
   997                           
   998                           	psect	rparam
   999  0000                     tblptru	equ	0xFF8
  1000                           tblptrh	equ	0xFF7
  1001                           tblptrl	equ	0xFF6
  1002                           tablat	equ	0xFF5
  1003                           wreg	equ	0xFE8
  1004                           status	equ	0xFD8


Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      12
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          250      0       0

Pointer List with Targets:

    putStringLCD@input	PTR unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_putStringLCD
    _putStringLCD->_putchLCD
    _putchLCD->_readBusyFlag
    _displayCtrl->_readBusyFlag
    _clearDisplay->_readBusyFlag
    _readBusyFlag->_spi_Send_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0     700
                                             11 COMRAM     1     1      0
                       _clearDisplay
                        _displayCtrl
                _initialisation_PORT
                 _initialisation_SPI
                       _putStringLCD
                       _readBusyFlag
 ---------------------------------------------------------------------------------
 (1) _putStringLCD                                         6     4      2     331
                                              5 COMRAM     6     4      2
                           _putchLCD
 ---------------------------------------------------------------------------------
 (2) _putchLCD                                             3     3      0     165
                                              2 COMRAM     3     3      0
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (1) _initialisation_SPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialisation_PORT                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _displayCtrl                                          4     2      2     293
                                              2 COMRAM     4     2      2
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (1) _clearDisplay                                         0     0      0      45
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (1) _readBusyFlag                                         1     1      0      30
                                              1 COMRAM     1     1      0
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (2) _spi_Send_Read                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearDisplay
     _readBusyFlag
       _spi_Send_Read
     _spi_Send_Read
   _displayCtrl
     _readBusyFlag
       _spi_Send_Read
     _spi_Send_Read
   _initialisation_PORT
   _initialisation_SPI
   _putStringLCD
     _putchLCD
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
   _readBusyFlag
     _spi_Send_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      C       C       1       12.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13           FA      0       0      31        0.0%
BANK13              FA      0       0      32        0.0%
BIGRAM             DF9      0       0      33        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Nov 21 08:21:22 2017

                ?_displayCtrl 0003                            l20 0FC2                            l18 0F9A  
                          l71 0EEE                            l59 1006                            l83 0E5C  
                          l76 0EAC                            l77 0E8C                  _putStringLCD 0E82  
                 __CFG_BORV$1 000000                           u127 0F2A                           u137 0F38  
                         u147 0F46                           wreg 000FE8                          STR_1 0E01  
                        _main 0F8E                          start 0000                 __CFG_IESO$OFF 000000  
               __CFG_FOSC$FRC 000000                  ___param_bank 000000          __end_of_clearDisplay 0FE6  
           putStringLCD@input 0006                         ?_main 0001   __size_of_initialisation_SPI 003E  
                       tablat 000FF5                         status 000FD8               __initialization 1012  
                __end_of_main 0FC4                        ??_main 000C                 __activetblptr 000001  
               ?_readBusyFlag 0001             spi_Send_Read@byte 0001                        _OSCCON 000FD3  
              __CFG_XINST$OFF 000000                 putchLCD@input 0005                __CFG_STVREN$ON 000000  
__size_of_initialisation_PORT 0040          __size_of_displayCtrl 0044                ??_readBusyFlag 0002  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8              __end_of_putchLCD 0E82                    __accesstop 0060  
     __end_of__initialization 1012         __size_of_clearDisplay 0022                 ___rparam_used 000001  
              __pcstackCOMRAM 0001                  _clearDisplay 0FC4                 putStringLCD@i 000A  
       __end_of_spi_Send_Read 1012             displayCtrl@cursor 0003                       _SSP2BUF 000F03  
        __end_of_readBusyFlag 1000                       __Hparam 0000                       __Lparam 0000  
                   ?_putchLCD 0001                  __psmallconst 0E00                displayCtrl@BCD 0006  
                     __pcinit 1012                       __ramtop 0E00                       __ptext0 0F8E  
                     __ptext1 0E82                       __ptext2 0E0E                       __ptext3 0F50  
                     __ptext4 0F10                       __ptext5 0ECC                       __ptext6 0FC4  
                     __ptext7 0FE6                       __ptext8 1000    __end_of_initialisation_SPI 0F8E  
        end_of_initialization 1012           _initialisation_PORT 0F10                    ??_putchLCD 0003  
        ?_initialisation_PORT 0001                     _RPOR22_23 000E1D                     _RPOR24_25 000E1E  
        readBusyFlag@retValue 0002                     _TRISCbits 000F94                     _TRISDbits 000F95  
                  main@status 000C                 ??_displayCtrl 0005         ??_initialisation_PORT 0001  
               ?_putStringLCD 0006           start_initialization 1012         __size_of_readBusyFlag 001A  
              ??_putStringLCD 0008           __end_of_displayCtrl 0F10                  _readBusyFlag 0FE6  
            displayCtrl@blink 0004             __size_of_putchLCD 0074                   __smallconst 0E00  
          displayCtrl@display 0005        __size_of_spi_Send_Read 0012                      _LATDbits 000F8C  
          _initialisation_SPI 0F50              __CFG_WDTPS$32768 000000           ?_initialisation_SPI 0001  
                    _SSP2CON1 000F19                      _SSP2CON3 000F39                   _displayCtrl 0ECC  
                    _SSP2STAT 000F1A          ??_initialisation_SPI 0001          __end_of_putStringLCD 0ECC  
                    __Hrparam 0000                      __Lrparam 0000                  __Lsmallconst 0E00  
               _spi_Send_Read 1000                 ?_clearDisplay 0001                 __size_of_main 0036  
 __end_of_initialisation_PORT 0F50                ?_spi_Send_Read 0001                      _putchLCD 0E0E  
                _SSP2STATbits 000F1A                ??_clearDisplay 0003                    _RPINR12_13 000E30  
       __size_of_putStringLCD 004A               ??_spi_Send_Read 0001  
