

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Nov 30 13:16:31 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F67J94
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    22  0000                     _RPINR12_13	set	3632
    23  0000                     _RPOR22_23	set	3613
    24  0000                     _RPOR24_25	set	3614
    25  0000                     _SSP2BUF	set	3843
    26  0000                     _SSP2CON1	set	3865
    27  0000                     _SSP2CON3	set	3897
    28  0000                     _SSP2STAT	set	3866
    29  0000                     _SSP2STATbits	set	3866
    30  0000                     _LATDbits	set	3980
    31  0000                     _OSCCON	set	4051
    32  0000                     _TRISCbits	set	3988
    33  0000                     _TRISDbits	set	3989
    34                           
    35                           	psect	smallconst
    36  000E00                     __psmallconst:
    37                           	opt stack 0
    38  000E00  00                 	db	0
    39  000E01                     STR_1:
    40                           
    41                           ; BSR set to: 15
    42  000E01  48                 	db	72	;'H'
    43  000E02  65                 	db	101	;'e'
    44  000E03  6C                 	db	108	;'l'
    45  000E04  6C                 	db	108	;'l'
    46  000E05  6F                 	db	111	;'o'
    47  000E06  20                 	db	32
    48  000E07  77                 	db	119	;'w'
    49  000E08  6F                 	db	111	;'o'
    50  000E09  72                 	db	114	;'r'
    51  000E0A  6C                 	db	108	;'l'
    52  000E0B  64                 	db	100	;'d'
    53  000E0C  00                 	db	0
    54  0000                     
    55                           ; #config settings
    56  000E0D  00                 	db	0	; dummy byte at the end
    57  0000                     
    58                           	psect	cinit
    59  001074                     __pcinit:
    60                           	opt stack 0
    61  001074                     start_initialization:
    62                           	opt stack 0
    63  001074                     __initialization:
    64                           	opt stack 0
    65  001074                     end_of_initialization:
    66                           	opt stack 0
    67  001074                     __end_of__initialization:
    68                           	opt stack 0
    69  001074  0E00               	movlw	low (__Lsmallconst shr (0+16))
    70  001076  6EF8               	movwf	tblptru,c
    71  001078  0E0E               	movlw	high __Lsmallconst
    72  00107A  6EF7               	movwf	tblptrh,c
    73  00107C  0100               	movlb	0
    74  00107E  EFD2  F007         	goto	_main	;jump to C main() function
    75                           tblptru	equ	0xFF8
    76                           tblptrh	equ	0xFF7
    77                           
    78                           	psect	cstackCOMRAM
    79  000001                     __pcstackCOMRAM:
    80                           	opt stack 0
    81  000001                     ??_fliplr:
    82  000001                     ??_initialisation_PORT:
    83  000001                     spi_Send_Read@byte:
    84                           	opt stack 0
    85                           
    86                           ; 1 bytes @ 0x0
    87  000001                     	ds	1
    88  000002                     readBusyFlag@retValue:
    89                           	opt stack 0
    90                           
    91                           ; 1 bytes @ 0x1
    92  000002                     	ds	1
    93  000003                     displayCtrl@cursor:
    94                           	opt stack 0
    95  000003                     fliplr@input:
    96                           	opt stack 0
    97                           
    98                           ; 1 bytes @ 0x2
    99  000003                     	ds	1
   100  000004                     displayCtrl@blink:
   101                           	opt stack 0
   102  000004                     putchLCD@input:
   103                           	opt stack 0
   104  000004                     moveCursor@row:
   105                           	opt stack 0
   106                           
   107                           ; 2 bytes @ 0x3
   108  000004                     	ds	1
   109  000005                     displayCtrl@display:
   110                           	opt stack 0
   111  000005                     putStringLCD@input:
   112                           	opt stack 0
   113                           
   114                           ; 2 bytes @ 0x4
   115  000005                     	ds	1
   116  000006                     displayCtrl@BCD:
   117                           	opt stack 0
   118  000006                     moveCursor@col:
   119                           	opt stack 0
   120                           
   121                           ; 2 bytes @ 0x5
   122  000006                     	ds	1
   123  000007                     ??_putStringLCD:
   124                           
   125                           ; 1 bytes @ 0x6
   126  000007                     	ds	1
   127  000008                     moveCursor@address:
   128                           	opt stack 0
   129                           
   130                           ; 1 bytes @ 0x7
   131  000008                     	ds	1
   132  000009                     putStringLCD@i:
   133                           	opt stack 0
   134                           
   135                           ; 2 bytes @ 0x8
   136  000009                     	ds	2
   137  00000B                     main@status:
   138                           	opt stack 0
   139                           
   140                           ; 1 bytes @ 0xA
   141  00000B                     	ds	1
   142                           tblptru	equ	0xFF8
   143                           tblptrh	equ	0xFF7
   144                           
   145 ;;
   146 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   147 ;;
   148 ;; *************** function _main *****************
   149 ;; Defined at:
   150 ;;		line 4 in file "main.c"
   151 ;; Parameters:    Size  Location     Type
   152 ;;		None
   153 ;; Auto vars:     Size  Location     Type
   154 ;;  data            5    0        unsigned char [5]
   155 ;;  i               2    0        int 
   156 ;;  status          1   10[COMRAM] unsigned char 
   157 ;; Return value:  Size  Location     Type
   158 ;;                  1    wreg      void 
   159 ;; Registers used:
   160 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   161 ;; Tracked objects:
   162 ;;		On entry : 0/0
   163 ;;		On exit  : 0/0
   164 ;;		Unchanged: 0/0
   165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   167 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   169 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   170 ;;Total ram usage:        1 bytes
   171 ;; Hardware stack levels required when called:    4
   172 ;; This function calls:
   173 ;;		_initialisation_LCD
   174 ;;		_moveCursor
   175 ;;		_putStringLCD
   176 ;; This function is called by:
   177 ;;		Startup code after reset
   178 ;; This function uses a non-reentrant model
   179 ;;
   180                           
   181                           	psect	text0
   182  000FA4                     __ptext0:
   183                           	opt stack 0
   184  000FA4                     _main:
   185                           	opt stack 27
   186                           
   187                           ;main.c: 6: unsigned char status = 0;
   188                           
   189                           ; BSR set to: 15
   190                           ;incstack = 0
   191  000FA4  0E00               	movlw	0
   192  000FA6  6E0B               	movwf	main@status,c
   193                           
   194                           ;main.c: 7: unsigned char data[5];
   195                           ;main.c: 8: int i;
   196                           ;main.c: 13: initialisation_LCD();
   197  000FA8  EC16  F008         	call	_initialisation_LCD	;wreg free
   198                           
   199                           ;main.c: 18: putStringLCD("Hello world");
   200  000FAC  0E01               	movlw	low STR_1
   201  000FAE  6E05               	movwf	putStringLCD@input,c
   202  000FB0  0E0E               	movlw	high STR_1
   203  000FB2  6E06               	movwf	putStringLCD@input+1,c
   204  000FB4  EC30  F007         	call	_putStringLCD	;wreg free
   205                           
   206                           ;main.c: 19: moveCursor(2, 0);
   207  000FB8  0E00               	movlw	0
   208  000FBA  6E05               	movwf	moveCursor@row+1,c
   209  000FBC  0E02               	movlw	2
   210  000FBE  6E04               	movwf	moveCursor@row,c
   211  000FC0  0E00               	movlw	0
   212  000FC2  6E07               	movwf	moveCursor@col+1,c
   213  000FC4  0E00               	movlw	0
   214  000FC6  6E06               	movwf	moveCursor@col,c
   215  000FC8  ECB6  F007         	call	_moveCursor	;wreg free
   216                           
   217                           ;main.c: 20: putStringLCD("world");
   218  000FCC  0E07               	movlw	low (STR_1+6)
   219  000FCE  6E05               	movwf	putStringLCD@input,c
   220  000FD0  0E0E               	movlw	high (STR_1+6)
   221  000FD2  6E06               	movwf	putStringLCD@input+1,c
   222  000FD4  EC30  F007         	call	_putStringLCD	;wreg free
   223  000FD8                     l9:
   224                           
   225                           ;main.c: 22: {
   226  000FD8  D7FF               	goto	l9
   227  000FDA                     __end_of_main:
   228                           	opt stack 0
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           
   232 ;; *************** function _putStringLCD *****************
   233 ;; Defined at:
   234 ;;		line 48 in file "LCD_SPI.c"
   235 ;; Parameters:    Size  Location     Type
   236 ;;  input           2    4[COMRAM] PTR const unsigned char 
   237 ;;		 -> STR_2(6), STR_1(12), 
   238 ;; Auto vars:     Size  Location     Type
   239 ;;  i               2    8[COMRAM] int 
   240 ;; Return value:  Size  Location     Type
   241 ;;                  1    wreg      void 
   242 ;; Registers used:
   243 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   244 ;; Tracked objects:
   245 ;;		On entry : 0/0
   246 ;;		On exit  : 0/0
   247 ;;		Unchanged: 0/0
   248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   249 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   250 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   251 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   252 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   253 ;;Total ram usage:        6 bytes
   254 ;; Hardware stack levels used:    1
   255 ;; Hardware stack levels required when called:    3
   256 ;; This function calls:
   257 ;;		_putchLCD
   258 ;; This function is called by:
   259 ;;		_main
   260 ;; This function uses a non-reentrant model
   261 ;;
   262                           
   263                           	psect	text1
   264  000E60                     __ptext1:
   265                           	opt stack 0
   266  000E60                     _putStringLCD:
   267                           	opt stack 27
   268                           
   269                           ;LCD_SPI.c: 50: int i;
   270                           ;LCD_SPI.c: 51: for (i = 0; input[i] != '\0'; i++)
   271                           
   272                           ;incstack = 0
   273  000E60  0E00               	movlw	0
   274  000E62  6E0A               	movwf	putStringLCD@i+1,c
   275  000E64  0E00               	movlw	0
   276  000E66  6E09               	movwf	putStringLCD@i,c
   277  000E68  D010               	goto	l878
   278  000E6A                     l874:
   279                           
   280                           ;LCD_SPI.c: 52: {
   281                           ;LCD_SPI.c: 53: putchLCD(input[i]);
   282  000E6A  5009               	movf	putStringLCD@i,w,c
   283  000E6C  2405               	addwf	putStringLCD@input,w,c
   284  000E6E  6E07               	movwf	??_putStringLCD& (0+255),c
   285  000E70  500A               	movf	putStringLCD@i+1,w,c
   286  000E72  2006               	addwfc	putStringLCD@input+1,w,c
   287  000E74  6E08               	movwf	(??_putStringLCD+1)& (0+255),c
   288  000E76  C007  FFF6         	movff	??_putStringLCD,tblptrl
   289  000E7A  C008  FFF7         	movff	??_putStringLCD+1,tblptrh
   290  000E7E                     	if	0	;tblptru may be non-zero
   291  000E7E                     	endif
   292  000E7E                     	if	0	;tblptru may be non-zero
   293  000E7E                     	endif
   294  000E7E  0008               	tblrd		*
   295  000E80  50F5               	movf	tablat,w,c
   296  000E82  ECED  F007         	call	_putchLCD
   297  000E86  4A09               	infsnz	putStringLCD@i,f,c
   298  000E88  2A0A               	incf	putStringLCD@i+1,f,c
   299  000E8A                     l878:
   300  000E8A  5009               	movf	putStringLCD@i,w,c
   301  000E8C  2405               	addwf	putStringLCD@input,w,c
   302  000E8E  6E07               	movwf	??_putStringLCD& (0+255),c
   303  000E90  500A               	movf	putStringLCD@i+1,w,c
   304  000E92  2006               	addwfc	putStringLCD@input+1,w,c
   305  000E94  6E08               	movwf	(??_putStringLCD+1)& (0+255),c
   306  000E96  C007  FFF6         	movff	??_putStringLCD,tblptrl
   307  000E9A  C008  FFF7         	movff	??_putStringLCD+1,tblptrh
   308  000E9E                     	if	0	;tblptru may be non-zero
   309  000E9E                     	endif
   310  000E9E                     	if	0	;tblptru may be non-zero
   311  000E9E                     	endif
   312  000E9E  0008               	tblrd		*
   313  000EA0  50F5               	movf	tablat,w,c
   314  000EA2  0900               	iorlw	0
   315  000EA4  B4D8               	btfsc	status,2,c
   316  000EA6  0012               	return	
   317  000EA8  D7E0               	goto	l874
   318  000EAA                     __end_of_putStringLCD:
   319                           	opt stack 0
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           status	equ	0xFD8
   325                           
   326 ;; *************** function _putchLCD *****************
   327 ;; Defined at:
   328 ;;		line 57 in file "LCD_SPI.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;  input           1    wreg     unsigned char 
   331 ;; Auto vars:     Size  Location     Type
   332 ;;  input           1    3[COMRAM] unsigned char 
   333 ;; Return value:  Size  Location     Type
   334 ;;                  1    wreg      void 
   335 ;; Registers used:
   336 ;;		wreg, status,2, status,0, cstack
   337 ;; Tracked objects:
   338 ;;		On entry : 0/0
   339 ;;		On exit  : 0/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   343 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   345 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   346 ;;Total ram usage:        1 bytes
   347 ;; Hardware stack levels used:    1
   348 ;; Hardware stack levels required when called:    2
   349 ;; This function calls:
   350 ;;		_fliplr
   351 ;;		_readBusyFlag
   352 ;;		_spi_Send_Read
   353 ;; This function is called by:
   354 ;;		_putStringLCD
   355 ;; This function uses a non-reentrant model
   356 ;;
   357                           
   358                           	psect	text2
   359  000FDA                     __ptext2:
   360                           	opt stack 0
   361  000FDA                     _putchLCD:
   362                           	opt stack 27
   363                           
   364                           ;incstack = 0
   365                           ;putchLCD@input stored from wreg
   366  000FDA  6E04               	movwf	putchLCD@input,c
   367                           
   368                           ;LCD_SPI.c: 59: input = fliplr(input);
   369  000FDC  5004               	movf	putchLCD@input,w,c
   370  000FDE  EC07  F007         	call	_fliplr
   371  000FE2  6E04               	movwf	putchLCD@input,c
   372  000FE4                     l760:
   373  000FE4  EC24  F008         	call	_readBusyFlag	;wreg free
   374  000FE8  0900               	iorlw	0
   375  000FEA  A4D8               	btfss	status,2,c
   376  000FEC  D7FB               	goto	l760
   377                           
   378                           ;LCD_SPI.c: 62: LATDbits.LATD3 = 0;
   379  000FEE  968C               	bcf	3980,3,c	;volatile
   380                           
   381                           ;LCD_SPI.c: 63: spi_Send_Read(0xFA);
   382  000FF0  0EFA               	movlw	250
   383  000FF2  EC31  F008         	call	_spi_Send_Read
   384                           
   385                           ;LCD_SPI.c: 64: spi_Send_Read(input & 0xF0);
   386  000FF6  5004               	movf	putchLCD@input,w,c
   387  000FF8  0BF0               	andlw	240
   388  000FFA  EC31  F008         	call	_spi_Send_Read
   389                           
   390                           ;LCD_SPI.c: 65: spi_Send_Read(input << 4);
   391  000FFE  3804               	swapf	putchLCD@input,w,c
   392  001000  0BF0               	andlw	240
   393  001002  EC31  F008         	call	_spi_Send_Read
   394                           
   395                           ;LCD_SPI.c: 66: LATDbits.LATD3 = 1;
   396  001006  868C               	bsf	3980,3,c	;volatile
   397  001008  0012               	return		;funcret
   398  00100A                     __end_of_putchLCD:
   399                           	opt stack 0
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           status	equ	0xFD8
   405                           
   406 ;; *************** function _moveCursor *****************
   407 ;; Defined at:
   408 ;;		line 78 in file "LCD_SPI.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;  row             2    3[COMRAM] int 
   411 ;;  col             2    5[COMRAM] int 
   412 ;; Auto vars:     Size  Location     Type
   413 ;;  address         1    7[COMRAM] unsigned char 
   414 ;; Return value:  Size  Location     Type
   415 ;;                  1    wreg      void 
   416 ;; Registers used:
   417 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   418 ;; Tracked objects:
   419 ;;		On entry : 0/0
   420 ;;		On exit  : 0/0
   421 ;;		Unchanged: 0/0
   422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   423 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   426 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   427 ;;Total ram usage:        5 bytes
   428 ;; Hardware stack levels used:    1
   429 ;; Hardware stack levels required when called:    2
   430 ;; This function calls:
   431 ;;		_fliplr
   432 ;;		_readBusyFlag
   433 ;;		_spi_Send_Read
   434 ;; This function is called by:
   435 ;;		_main
   436 ;; This function uses a non-reentrant model
   437 ;;
   438                           
   439                           	psect	text3
   440  000F6C                     __ptext3:
   441                           	opt stack 0
   442  000F6C                     _moveCursor:
   443                           	opt stack 28
   444                           
   445                           ;LCD_SPI.c: 80: char address = row * 20 + col;
   446                           
   447                           ;incstack = 0
   448  000F6C  5004               	movf	moveCursor@row,w,c
   449  000F6E  0D14               	mullw	20
   450  000F70  50F3               	movf	prodl,w,c
   451  000F72  2406               	addwf	moveCursor@col,w,c
   452  000F74  6E08               	movwf	moveCursor@address,c
   453                           
   454                           ;LCD_SPI.c: 81: address = fliplr(address);
   455  000F76  5008               	movf	moveCursor@address,w,c
   456  000F78  EC07  F007         	call	_fliplr
   457  000F7C  6E08               	movwf	moveCursor@address,c
   458  000F7E                     l884:
   459  000F7E  EC24  F008         	call	_readBusyFlag	;wreg free
   460  000F82  0900               	iorlw	0
   461  000F84  A4D8               	btfss	status,2,c
   462  000F86  D7FB               	goto	l884
   463                           
   464                           ;LCD_SPI.c: 83: LATDbits.LATD3 = 0;
   465  000F88  968C               	bcf	3980,3,c	;volatile
   466                           
   467                           ;LCD_SPI.c: 84: spi_Send_Read(0xF8);
   468  000F8A  0EF8               	movlw	248
   469  000F8C  EC31  F008         	call	_spi_Send_Read
   470                           
   471                           ;LCD_SPI.c: 85: spi_Send_Read(address & 0xF0);
   472  000F90  5008               	movf	moveCursor@address,w,c
   473  000F92  0BF0               	andlw	240
   474  000F94  EC31  F008         	call	_spi_Send_Read
   475                           
   476                           ;LCD_SPI.c: 86: spi_Send_Read((address << 4) | 0x10);
   477  000F98  3808               	swapf	moveCursor@address,w,c
   478  000F9A  0BF0               	andlw	240
   479  000F9C  0910               	iorlw	16
   480  000F9E  EC31  F008         	call	_spi_Send_Read
   481  000FA2  0012               	return		;funcret
   482  000FA4                     __end_of_moveCursor:
   483                           	opt stack 0
   484                           tblptru	equ	0xFF8
   485                           tblptrh	equ	0xFF7
   486                           tblptrl	equ	0xFF6
   487                           tablat	equ	0xFF5
   488                           prodl	equ	0xFF3
   489                           status	equ	0xFD8
   490                           
   491 ;; *************** function _fliplr *****************
   492 ;; Defined at:
   493 ;;		line 69 in file "LCD_SPI.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;  input           1    wreg     unsigned char 
   496 ;; Auto vars:     Size  Location     Type
   497 ;;  input           1    2[COMRAM] unsigned char 
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      unsigned char 
   500 ;; Registers used:
   501 ;;		wreg, status,2, status,0
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   508 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   509 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   510 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   511 ;;Total ram usage:        3 bytes
   512 ;; Hardware stack levels used:    1
   513 ;; This function calls:
   514 ;;		Nothing
   515 ;; This function is called by:
   516 ;;		_putchLCD
   517 ;;		_moveCursor
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           	psect	text4
   522  000E0E                     __ptext4:
   523                           	opt stack 0
   524  000E0E                     _fliplr:
   525                           	opt stack 28
   526                           
   527                           ;incstack = 0
   528                           ;fliplr@input stored from wreg
   529  000E0E  6E03               	movwf	fliplr@input,c
   530                           
   531                           ;LCD_SPI.c: 72: input = (input & 0xF0) >> 4 | (input & 0x0F) << 4;
   532  000E10  C003  F001         	movff	fliplr@input,??_fliplr
   533  000E14  0E0F               	movlw	15
   534  000E16  1601               	andwf	??_fliplr,f,c
   535  000E18  3A01               	swapf	??_fliplr,f,c
   536  000E1A  0EF0               	movlw	240
   537  000E1C  1601               	andwf	??_fliplr,f,c
   538  000E1E  3803               	swapf	fliplr@input,w,c
   539  000E20  0B0F               	andlw	15
   540  000E22  0B0F               	andlw	15
   541  000E24  1001               	iorwf	??_fliplr,w,c
   542  000E26  6E03               	movwf	fliplr@input,c
   543                           
   544                           ;LCD_SPI.c: 73: input = (input & 0xCC) >> 2 | (input & 0x33) << 2;
   545  000E28  C003  F001         	movff	fliplr@input,??_fliplr
   546  000E2C  0E33               	movlw	51
   547  000E2E  1601               	andwf	??_fliplr,f,c
   548  000E30  90D8               	bcf	status,0,c
   549  000E32  3601               	rlcf	??_fliplr,f,c
   550  000E34  90D8               	bcf	status,0,c
   551  000E36  3601               	rlcf	??_fliplr,f,c
   552  000E38  4003               	rrncf	fliplr@input,w,c
   553  000E3A  42E8               	rrncf	wreg,f,c
   554  000E3C  0B3F               	andlw	63
   555  000E3E  0B33               	andlw	51
   556  000E40  1001               	iorwf	??_fliplr,w,c
   557  000E42  6E03               	movwf	fliplr@input,c
   558                           
   559                           ;LCD_SPI.c: 74: input = (input & 0xAA) >> 1 | (input & 0x55) << 1;
   560  000E44  C003  F001         	movff	fliplr@input,??_fliplr
   561  000E48  0E55               	movlw	85
   562  000E4A  1601               	andwf	??_fliplr,f,c
   563  000E4C  90D8               	bcf	status,0,c
   564  000E4E  3401               	rlcf	??_fliplr,w,c
   565  000E50  6E02               	movwf	(??_fliplr+1)& (0+255),c
   566  000E52  90D8               	bcf	status,0,c
   567  000E54  3003               	rrcf	fliplr@input,w,c
   568  000E56  0B55               	andlw	85
   569  000E58  1002               	iorwf	??_fliplr+1,w,c
   570  000E5A  6E03               	movwf	fliplr@input,c
   571                           
   572                           ;LCD_SPI.c: 76: return input;
   573  000E5C  5003               	movf	fliplr@input,w,c
   574  000E5E  0012               	return	
   575  000E60                     __end_of_fliplr:
   576                           	opt stack 0
   577                           tblptru	equ	0xFF8
   578                           tblptrh	equ	0xFF7
   579                           tblptrl	equ	0xFF6
   580                           tablat	equ	0xFF5
   581                           prodl	equ	0xFF3
   582                           wreg	equ	0xFE8
   583                           status	equ	0xFD8
   584                           
   585 ;; *************** function _initialisation_LCD *****************
   586 ;; Defined at:
   587 ;;		line 145 in file "LCD_SPI.c"
   588 ;; Parameters:    Size  Location     Type
   589 ;;		None
   590 ;; Auto vars:     Size  Location     Type
   591 ;;		None
   592 ;; Return value:  Size  Location     Type
   593 ;;                  1    wreg      void 
   594 ;; Registers used:
   595 ;;		wreg, status,2, status,0, cstack
   596 ;; Tracked objects:
   597 ;;		On entry : 0/0
   598 ;;		On exit  : 0/0
   599 ;;		Unchanged: 0/0
   600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   605 ;;Total ram usage:        0 bytes
   606 ;; Hardware stack levels used:    1
   607 ;; Hardware stack levels required when called:    3
   608 ;; This function calls:
   609 ;;		_clearDisplay
   610 ;;		_displayCtrl
   611 ;;		_initialisation_PORT
   612 ;;		_initialisation_SPI
   613 ;; This function is called by:
   614 ;;		_main
   615 ;; This function uses a non-reentrant model
   616 ;;
   617                           
   618                           	psect	text5
   619  00102C                     __ptext5:
   620                           	opt stack 0
   621  00102C                     _initialisation_LCD:
   622                           	opt stack 27
   623                           
   624                           ;LCD_SPI.c: 147: initialisation_PORT();
   625                           
   626                           ;incstack = 0
   627  00102C  EC77  F007         	call	_initialisation_PORT	;wreg free
   628                           
   629                           ;LCD_SPI.c: 148: initialisation_SPI();
   630  001030  EC97  F007         	call	_initialisation_SPI	;wreg free
   631                           
   632                           ;LCD_SPI.c: 149: clearDisplay();
   633  001034  EC05  F008         	call	_clearDisplay	;wreg free
   634                           
   635                           ;LCD_SPI.c: 150: displayCtrl(1,1,0);
   636  001038  0E01               	movlw	1
   637  00103A  6E03               	movwf	displayCtrl@cursor,c
   638  00103C  0E00               	movlw	0
   639  00103E  6E04               	movwf	displayCtrl@blink,c
   640  001040  0E01               	movlw	1
   641  001042  EC55  F007         	call	_displayCtrl
   642  001046  0012               	return		;funcret
   643  001048                     __end_of_initialisation_LCD:
   644                           	opt stack 0
   645                           tblptru	equ	0xFF8
   646                           tblptrh	equ	0xFF7
   647                           tblptrl	equ	0xFF6
   648                           tablat	equ	0xFF5
   649                           prodl	equ	0xFF3
   650                           wreg	equ	0xFE8
   651                           status	equ	0xFD8
   652                           
   653 ;; *************** function _initialisation_SPI *****************
   654 ;; Defined at:
   655 ;;		line 108 in file "LCD_SPI.c"
   656 ;; Parameters:    Size  Location     Type
   657 ;;		None
   658 ;; Auto vars:     Size  Location     Type
   659 ;;		None
   660 ;; Return value:  Size  Location     Type
   661 ;;                  1    wreg      void 
   662 ;; Registers used:
   663 ;;		wreg, status,2, status,0
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   673 ;;Total ram usage:        0 bytes
   674 ;; Hardware stack levels used:    1
   675 ;; This function calls:
   676 ;;		Nothing
   677 ;; This function is called by:
   678 ;;		_initialisation_LCD
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           	psect	text6
   683  000F2E                     __ptext6:
   684                           	opt stack 0
   685  000F2E                     _initialisation_SPI:
   686                           	opt stack 29
   687                           
   688                           ;LCD_SPI.c: 112: RPOR24_25 |= 0x04;
   689                           
   690                           ;incstack = 0
   691  000F2E  010E               	movlb	14	; () banked
   692  000F30  851E               	bsf	30,2,b	;volatile
   693                           
   694                           ; BSR set to: 14
   695                           ;LCD_SPI.c: 113: RPOR24_25 &= 0xF4;
   696  000F32  0EF4               	movlw	244
   697  000F34  010E               	movlb	14	; () banked
   698  000F36  171E               	andwf	30,f,b	;volatile
   699                           
   700                           ; BSR set to: 14
   701                           ;LCD_SPI.c: 115: RPOR22_23 |= 0x05;
   702  000F38  0E05               	movlw	5
   703  000F3A  010E               	movlb	14	; () banked
   704  000F3C  131D               	iorwf	29,f,b	;volatile
   705                           
   706                           ; BSR set to: 14
   707                           ;LCD_SPI.c: 116: RPOR22_23 &= 0xF5;
   708  000F3E  0EF5               	movlw	245
   709  000F40  010E               	movlb	14	; () banked
   710  000F42  171D               	andwf	29,f,b	;volatile
   711                           
   712                           ; BSR set to: 14
   713                           ;LCD_SPI.c: 118: RPINR12_13 |= 0x50;
   714  000F44  0E50               	movlw	80
   715  000F46  010E               	movlb	14	; () banked
   716  000F48  1330               	iorwf	48,f,b	;volatile
   717                           
   718                           ; BSR set to: 14
   719                           ;LCD_SPI.c: 119: RPINR12_13 &= 0x5F;
   720  000F4A  0E5F               	movlw	95
   721  000F4C  010E               	movlb	14	; () banked
   722  000F4E  1730               	andwf	48,f,b	;volatile
   723                           
   724                           ; BSR set to: 14
   725                           ;LCD_SPI.c: 122: SSP2CON1 &= 0xF1;
   726  000F50  0EF1               	movlw	241
   727  000F52  010F               	movlb	15	; () banked
   728  000F54  1719               	andwf	25,f,b	;volatile
   729                           
   730                           ; BSR set to: 15
   731                           ;LCD_SPI.c: 123: SSP2CON1 |= 0x31;
   732  000F56  0E31               	movlw	49
   733  000F58  010F               	movlb	15	; () banked
   734  000F5A  1319               	iorwf	25,f,b	;volatile
   735                           
   736                           ; BSR set to: 15
   737                           ;LCD_SPI.c: 124: SSP2STAT |= 0x80;
   738  000F5C  010F               	movlb	15	; () banked
   739  000F5E  8F1A               	bsf	26,7,b	;volatile
   740                           
   741                           ; BSR set to: 15
   742                           ;LCD_SPI.c: 125: SSP2STAT &= ~0x40;
   743  000F60  010F               	movlb	15	; () banked
   744  000F62  9D1A               	bcf	26,6,b	;volatile
   745                           
   746                           ; BSR set to: 15
   747                           ;LCD_SPI.c: 126: SSP2CON3 &= 0x8F;
   748  000F64  0E8F               	movlw	143
   749  000F66  010F               	movlb	15	; () banked
   750  000F68  1739               	andwf	57,f,b	;volatile
   751                           
   752                           ; BSR set to: 15
   753  000F6A  0012               	return		;funcret
   754  000F6C                     __end_of_initialisation_SPI:
   755                           	opt stack 0
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           prodl	equ	0xFF3
   761                           wreg	equ	0xFE8
   762                           status	equ	0xFD8
   763                           
   764 ;; *************** function _initialisation_PORT *****************
   765 ;; Defined at:
   766 ;;		line 130 in file "LCD_SPI.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;		None
   769 ;; Auto vars:     Size  Location     Type
   770 ;;		None
   771 ;; Return value:  Size  Location     Type
   772 ;;                  1    wreg      void 
   773 ;; Registers used:
   774 ;;		wreg, status,2, status,0
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   782 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   783 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   784 ;;Total ram usage:        1 bytes
   785 ;; Hardware stack levels used:    1
   786 ;; This function calls:
   787 ;;		Nothing
   788 ;; This function is called by:
   789 ;;		_initialisation_LCD
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           	psect	text7
   794  000EEE                     __ptext7:
   795                           	opt stack 0
   796  000EEE                     _initialisation_PORT:
   797                           	opt stack 29
   798                           
   799                           ;LCD_SPI.c: 132: OSCCON = OSCCON | 0b01110000;
   800                           
   801                           ; BSR set to: 15
   802                           ;incstack = 0
   803  000EEE  50D3               	movf	4051,w,c	;volatile
   804  000EF0  0970               	iorlw	112
   805  000EF2  6ED3               	movwf	4051,c	;volatile
   806                           
   807                           ;LCD_SPI.c: 133: TRISDbits.TRISD4 = 0;
   808  000EF4  9895               	bcf	3989,4,c	;volatile
   809                           
   810                           ;LCD_SPI.c: 134: TRISDbits.TRISD2 = 0;
   811  000EF6  9495               	bcf	3989,2,c	;volatile
   812                           
   813                           ;LCD_SPI.c: 135: TRISDbits.TRISD3 = 0;
   814  000EF8  9695               	bcf	3989,3,c	;volatile
   815                           
   816                           ;LCD_SPI.c: 136: TRISDbits.TRISD1 = 1;
   817  000EFA  8295               	bsf	3989,1,c	;volatile
   818                           
   819                           ;LCD_SPI.c: 137: TRISCbits.TRISC0 = 0;
   820  000EFC  9094               	bcf	3988,0,c	;volatile
   821                           
   822                           ;LCD_SPI.c: 138: LATDbits.LATD3 = 1;
   823  000EFE  868C               	bsf	3980,3,c	;volatile
   824                           
   825                           ;LCD_SPI.c: 139: __nop();
   826  000F00  F000               	nop	
   827                           
   828                           ;LCD_SPI.c: 140: _delay((unsigned long)((33)*(8000000/4000.0)));
   829  000F02  0E56               	movlw	86
   830  000F04  6E01               	movwf	??_initialisation_PORT& (0+255),c
   831  000F06  0EB6               	movlw	182
   832  000F08                     u127:
   833  000F08  2EE8               	decfsz	wreg,f,c
   834  000F0A  D7FE               	goto	u127
   835  000F0C  2E01               	decfsz	??_initialisation_PORT& (0+255),f,c
   836  000F0E  D7FC               	goto	u127
   837                           
   838                           ;LCD_SPI.c: 141: _delay((unsigned long)((33)*(8000000/4000.0)));
   839  000F10  0E56               	movlw	86
   840  000F12  6E01               	movwf	??_initialisation_PORT& (0+255),c
   841  000F14  0EB6               	movlw	182
   842  000F16                     u137:
   843  000F16  2EE8               	decfsz	wreg,f,c
   844  000F18  D7FE               	goto	u137
   845  000F1A  2E01               	decfsz	??_initialisation_PORT& (0+255),f,c
   846  000F1C  D7FC               	goto	u137
   847                           
   848                           ;LCD_SPI.c: 142: _delay((unsigned long)((33)*(8000000/4000.0)));
   849  000F1E  0E56               	movlw	86
   850  000F20  6E01               	movwf	??_initialisation_PORT& (0+255),c
   851  000F22  0EB6               	movlw	182
   852  000F24                     u147:
   853  000F24  2EE8               	decfsz	wreg,f,c
   854  000F26  D7FE               	goto	u147
   855  000F28  2E01               	decfsz	??_initialisation_PORT& (0+255),f,c
   856  000F2A  D7FC               	goto	u147
   857  000F2C  0012               	return		;funcret
   858  000F2E                     __end_of_initialisation_PORT:
   859                           	opt stack 0
   860                           tblptru	equ	0xFF8
   861                           tblptrh	equ	0xFF7
   862                           tblptrl	equ	0xFF6
   863                           tablat	equ	0xFF5
   864                           prodl	equ	0xFF3
   865                           wreg	equ	0xFE8
   866                           status	equ	0xFD8
   867                           
   868 ;; *************** function _displayCtrl *****************
   869 ;; Defined at:
   870 ;;		line 30 in file "LCD_SPI.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;  display         1    wreg     unsigned char 
   873 ;;  cursor          1    2[COMRAM] unsigned char 
   874 ;;  blink           1    3[COMRAM] unsigned char 
   875 ;; Auto vars:     Size  Location     Type
   876 ;;  display         1    4[COMRAM] unsigned char 
   877 ;;  BCD             1    5[COMRAM] unsigned char 
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      void 
   880 ;; Registers used:
   881 ;;		wreg, status,2, status,0, cstack
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   888 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   890 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   891 ;;Total ram usage:        4 bytes
   892 ;; Hardware stack levels used:    1
   893 ;; Hardware stack levels required when called:    2
   894 ;; This function calls:
   895 ;;		_readBusyFlag
   896 ;;		_spi_Send_Read
   897 ;; This function is called by:
   898 ;;		_initialisation_LCD
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           	psect	text8
   903  000EAA                     __ptext8:
   904                           	opt stack 0
   905  000EAA                     _displayCtrl:
   906                           	opt stack 27
   907                           
   908                           ;incstack = 0
   909                           ;displayCtrl@display stored from wreg
   910  000EAA  6E05               	movwf	displayCtrl@display,c
   911                           
   912                           ;LCD_SPI.c: 32: char BCD = blink;
   913  000EAC  C004  F006         	movff	displayCtrl@blink,displayCtrl@BCD
   914                           
   915                           ;LCD_SPI.c: 33: BCD <<= 1;
   916  000EB0  90D8               	bcf	status,0,c
   917  000EB2  3606               	rlcf	displayCtrl@BCD,f,c
   918                           
   919                           ;LCD_SPI.c: 34: BCD += cursor;
   920  000EB4  5003               	movf	displayCtrl@cursor,w,c
   921  000EB6  2606               	addwf	displayCtrl@BCD,f,c
   922                           
   923                           ;LCD_SPI.c: 35: BCD <<= 1;
   924  000EB8  90D8               	bcf	status,0,c
   925  000EBA  3606               	rlcf	displayCtrl@BCD,f,c
   926                           
   927                           ;LCD_SPI.c: 36: BCD += display;
   928  000EBC  5005               	movf	displayCtrl@display,w,c
   929  000EBE  2606               	addwf	displayCtrl@BCD,f,c
   930                           
   931                           ;LCD_SPI.c: 37: BCD <<= 1;
   932  000EC0  90D8               	bcf	status,0,c
   933  000EC2  3606               	rlcf	displayCtrl@BCD,f,c
   934                           
   935                           ;LCD_SPI.c: 38: BCD += 1;
   936  000EC4  2A06               	incf	displayCtrl@BCD,f,c
   937                           
   938                           ;LCD_SPI.c: 39: BCD <<= 4;
   939  000EC6  3A06               	swapf	displayCtrl@BCD,f,c
   940  000EC8  0EF0               	movlw	240
   941  000ECA  1606               	andwf	displayCtrl@BCD,f,c
   942  000ECC                     l864:
   943  000ECC  EC24  F008         	call	_readBusyFlag	;wreg free
   944  000ED0  0900               	iorlw	0
   945  000ED2  A4D8               	btfss	status,2,c
   946  000ED4  D7FB               	goto	l864
   947                           
   948                           ;LCD_SPI.c: 42: LATDbits.LATD3 = 0;
   949  000ED6  968C               	bcf	3980,3,c	;volatile
   950                           
   951                           ;LCD_SPI.c: 43: spi_Send_Read(0xF8);
   952  000ED8  0EF8               	movlw	248
   953  000EDA  EC31  F008         	call	_spi_Send_Read
   954                           
   955                           ;LCD_SPI.c: 44: spi_Send_Read(BCD);
   956  000EDE  5006               	movf	displayCtrl@BCD,w,c
   957  000EE0  EC31  F008         	call	_spi_Send_Read
   958                           
   959                           ;LCD_SPI.c: 45: spi_Send_Read(0x00);
   960  000EE4  0E00               	movlw	0
   961  000EE6  EC31  F008         	call	_spi_Send_Read
   962                           
   963                           ;LCD_SPI.c: 46: LATDbits.LATD3 = 1;
   964  000EEA  868C               	bsf	3980,3,c	;volatile
   965  000EEC  0012               	return		;funcret
   966  000EEE                     __end_of_displayCtrl:
   967                           	opt stack 0
   968                           tblptru	equ	0xFF8
   969                           tblptrh	equ	0xFF7
   970                           tblptrl	equ	0xFF6
   971                           tablat	equ	0xFF5
   972                           prodl	equ	0xFF3
   973                           wreg	equ	0xFE8
   974                           status	equ	0xFD8
   975                           
   976 ;; *************** function _clearDisplay *****************
   977 ;; Defined at:
   978 ;;		line 18 in file "LCD_SPI.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;		None
   981 ;; Auto vars:     Size  Location     Type
   982 ;;		None
   983 ;; Return value:  Size  Location     Type
   984 ;;                  1    wreg      void 
   985 ;; Registers used:
   986 ;;		wreg, status,2, status,0, cstack
   987 ;; Tracked objects:
   988 ;;		On entry : 0/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   996 ;;Total ram usage:        0 bytes
   997 ;; Hardware stack levels used:    1
   998 ;; Hardware stack levels required when called:    2
   999 ;; This function calls:
  1000 ;;		_readBusyFlag
  1001 ;;		_spi_Send_Read
  1002 ;; This function is called by:
  1003 ;;		_initialisation_LCD
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           	psect	text9
  1008  00100A                     __ptext9:
  1009                           	opt stack 0
  1010  00100A                     _clearDisplay:
  1011                           	opt stack 27
  1012  00100A                     l738:
  1013  00100A  EC24  F008         	call	_readBusyFlag	;wreg free
  1014  00100E  0900               	iorlw	0
  1015  001010  A4D8               	btfss	status,2,c
  1016  001012  D7FB               	goto	l738
  1017                           
  1018                           ;LCD_SPI.c: 22: LATDbits.LATD3 = 0;
  1019  001014  968C               	bcf	3980,3,c	;volatile
  1020                           
  1021                           ;LCD_SPI.c: 23: spi_Send_Read(0xF8);
  1022  001016  0EF8               	movlw	248
  1023  001018  EC31  F008         	call	_spi_Send_Read
  1024                           
  1025                           ;LCD_SPI.c: 24: spi_Send_Read(0x80);
  1026  00101C  0E80               	movlw	128
  1027  00101E  EC31  F008         	call	_spi_Send_Read
  1028                           
  1029                           ;LCD_SPI.c: 25: spi_Send_Read(0x00);
  1030  001022  0E00               	movlw	0
  1031  001024  EC31  F008         	call	_spi_Send_Read
  1032                           
  1033                           ;LCD_SPI.c: 26: LATDbits.LATD3 = 1;
  1034  001028  868C               	bsf	3980,3,c	;volatile
  1035  00102A  0012               	return		;funcret
  1036  00102C                     __end_of_clearDisplay:
  1037                           	opt stack 0
  1038                           tblptru	equ	0xFF8
  1039                           tblptrh	equ	0xFF7
  1040                           tblptrl	equ	0xFF6
  1041                           tablat	equ	0xFF5
  1042                           prodl	equ	0xFF3
  1043                           wreg	equ	0xFE8
  1044                           status	equ	0xFD8
  1045                           
  1046 ;; *************** function _readBusyFlag *****************
  1047 ;; Defined at:
  1048 ;;		line 89 in file "LCD_SPI.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;		None
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;  retValue        1    1[COMRAM] unsigned char 
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  1    wreg      unsigned char 
  1055 ;; Registers used:
  1056 ;;		wreg, status,2, status,0, cstack
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1063 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1065 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1066 ;;Total ram usage:        1 bytes
  1067 ;; Hardware stack levels used:    1
  1068 ;; Hardware stack levels required when called:    1
  1069 ;; This function calls:
  1070 ;;		_spi_Send_Read
  1071 ;; This function is called by:
  1072 ;;		_clearDisplay
  1073 ;;		_displayCtrl
  1074 ;;		_putchLCD
  1075 ;;		_moveCursor
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text10
  1080  001048                     __ptext10:
  1081                           	opt stack 0
  1082  001048                     _readBusyFlag:
  1083                           	opt stack 27
  1084                           
  1085                           ;LCD_SPI.c: 91: unsigned char retValue;
  1086                           ;LCD_SPI.c: 93: LATDbits.LATD3 = 0;
  1087                           
  1088                           ;incstack = 0
  1089  001048  968C               	bcf	3980,3,c	;volatile
  1090                           
  1091                           ;LCD_SPI.c: 94: spi_Send_Read(0xFC);
  1092  00104A  0EFC               	movlw	252
  1093  00104C  EC31  F008         	call	_spi_Send_Read
  1094                           
  1095                           ;LCD_SPI.c: 95: retValue = spi_Send_Read(0x00);
  1096  001050  0E00               	movlw	0
  1097  001052  EC31  F008         	call	_spi_Send_Read
  1098  001056  6E02               	movwf	readBusyFlag@retValue,c
  1099                           
  1100                           ;LCD_SPI.c: 96: LATDbits.LATD3 = 1;
  1101  001058  868C               	bsf	3980,3,c	;volatile
  1102                           
  1103                           ;LCD_SPI.c: 97: _delay((unsigned long)((1)*(8000000/4000000.0)));
  1104  00105A  D000               	nop2		;2 cycle nop
  1105                           
  1106                           ;LCD_SPI.c: 98: return (retValue & 1);
  1107  00105C  5002               	movf	readBusyFlag@retValue,w,c
  1108  00105E  0B01               	andlw	1
  1109  001060  0012               	return	
  1110  001062                     __end_of_readBusyFlag:
  1111                           	opt stack 0
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           prodl	equ	0xFF3
  1117                           wreg	equ	0xFE8
  1118                           status	equ	0xFD8
  1119                           
  1120 ;; *************** function _spi_Send_Read *****************
  1121 ;; Defined at:
  1122 ;;		line 11 in file "LCD_SPI.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;  byte            1    wreg     unsigned char 
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  byte            1    0[COMRAM] unsigned char 
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  1    wreg      unsigned char 
  1129 ;; Registers used:
  1130 ;;		wreg, status,2
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1137 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1139 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1140 ;;Total ram usage:        1 bytes
  1141 ;; Hardware stack levels used:    1
  1142 ;; This function calls:
  1143 ;;		Nothing
  1144 ;; This function is called by:
  1145 ;;		_clearDisplay
  1146 ;;		_displayCtrl
  1147 ;;		_putchLCD
  1148 ;;		_moveCursor
  1149 ;;		_readBusyFlag
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text11
  1154  001062                     __ptext11:
  1155                           	opt stack 0
  1156  001062                     _spi_Send_Read:
  1157                           	opt stack 28
  1158                           
  1159                           ;incstack = 0
  1160                           ;spi_Send_Read@byte stored from wreg
  1161  001062  6E01               	movwf	spi_Send_Read@byte,c
  1162                           
  1163                           ;LCD_SPI.c: 13: SSP2BUF = byte;
  1164  001064  C001  FF03         	movff	spi_Send_Read@byte,3843	;volatile
  1165  001068                     l49:
  1166  001068  010F               	movlb	15	; () banked
  1167  00106A  A11A               	btfss	26,0,b	;volatile
  1168  00106C  D7FD               	goto	l49
  1169                           
  1170                           ; BSR set to: 15
  1171                           ;LCD_SPI.c: 15: return SSP2BUF;
  1172  00106E  010F               	movlb	15	; () banked
  1173  001070  5103               	movf	3,w,b	;volatile
  1174                           
  1175                           ; BSR set to: 15
  1176  001072  0012               	return		;funcret
  1177  001074                     __end_of_spi_Send_Read:
  1178                           	opt stack 0
  1179                           tblptru	equ	0xFF8
  1180                           tblptrh	equ	0xFF7
  1181                           tblptrl	equ	0xFF6
  1182                           tablat	equ	0xFF5
  1183                           prodl	equ	0xFF3
  1184                           wreg	equ	0xFE8
  1185                           status	equ	0xFD8
  1186                           tblptru	equ	0xFF8
  1187                           tblptrh	equ	0xFF7
  1188                           tblptrl	equ	0xFF6
  1189                           tablat	equ	0xFF5
  1190                           prodl	equ	0xFF3
  1191                           wreg	equ	0xFE8
  1192                           status	equ	0xFD8
  1193                           
  1194                           	psect	rparam
  1195  0000                     tblptru	equ	0xFF8
  1196                           tblptrh	equ	0xFF7
  1197                           tblptrl	equ	0xFF6
  1198                           tablat	equ	0xFF5
  1199                           prodl	equ	0xFF3
  1200                           wreg	equ	0xFE8
  1201                           status	equ	0xFD8


Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      11
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          250      0       0

Pointer List with Targets:

    putStringLCD@input	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[6]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_putStringLCD
    _putStringLCD->_putchLCD
    _putchLCD->_fliplr
    _moveCursor->_fliplr
    _initialisation_LCD->_displayCtrl
    _displayCtrl->_readBusyFlag
    _clearDisplay->_readBusyFlag
    _readBusyFlag->_spi_Send_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    1118
                                             10 COMRAM     1     1      0
                 _initialisation_LCD
                         _moveCursor
                       _putStringLCD
 ---------------------------------------------------------------------------------
 (1) _putStringLCD                                         6     4      2     413
                                              4 COMRAM     6     4      2
                           _putchLCD
 ---------------------------------------------------------------------------------
 (2) _putchLCD                                             1     1      0     195
                                              3 COMRAM     1     1      0
                             _fliplr
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (1) _moveCursor                                           5     1      4     390
                                              3 COMRAM     5     1      4
                             _fliplr
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (3) _fliplr                                               3     3      0     105
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initialisation_LCD                                   0     0      0     314
                       _clearDisplay
                        _displayCtrl
                _initialisation_PORT
                 _initialisation_SPI
 ---------------------------------------------------------------------------------
 (2) _initialisation_SPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initialisation_PORT                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _displayCtrl                                          4     2      2     269
                                              2 COMRAM     4     2      2
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (2) _clearDisplay                                         0     0      0      45
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (3) _readBusyFlag                                         1     1      0      30
                                              1 COMRAM     1     1      0
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (3) _spi_Send_Read                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialisation_LCD
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _displayCtrl
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _initialisation_PORT
     _initialisation_SPI
   _moveCursor
     _fliplr
     _readBusyFlag
       _spi_Send_Read
     _spi_Send_Read
   _putStringLCD
     _putchLCD
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      B       B       1       11.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13           FA      0       0      31        0.0%
BANK13              FA      0       0      32        0.0%
BIGRAM             DF9      0       0      33        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Nov 30 13:16:31 2017

                           l9 0FD8                  ?_displayCtrl 0003                            l49 1068  
                _putStringLCD 0E60                   __CFG_BORV$1 000000                           l760 0FE4  
                         l738 100A                           l864 0ECC                           l874 0E6A  
                         l884 0F7E                           l878 0E8A                           u127 0F08  
                         u137 0F16                           u147 0F24                           wreg 000FE8  
                        STR_1 0E01                          STR_2 0E07                          _main 0FA4  
                        prodl 000FF3                          start 0000                 __CFG_IESO$OFF 000000  
               __CFG_FOSC$FRC 000000                  ___param_bank 000010          __end_of_clearDisplay 102C  
                 fliplr@input 0003             putStringLCD@input 0005                         ?_main 0001  
 __size_of_initialisation_LCD 001C   __size_of_initialisation_SPI 003E                         tablat 000FF5  
                       status 000FD8               __initialization 1074                  __end_of_main 0FDA  
                      ??_main 000B                 __activetblptr 000001                 ?_readBusyFlag 0001  
           spi_Send_Read@byte 0001                        _OSCCON 000FD3                __CFG_XINST$OFF 000000  
               putchLCD@input 0004                __CFG_STVREN$ON 000000  __size_of_initialisation_PORT 0040  
                      _fliplr 0E0E          __size_of_displayCtrl 0044                ??_readBusyFlag 0002  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8              __end_of_putchLCD 100A                    __accesstop 0060  
     __end_of__initialization 1074         __size_of_clearDisplay 0022                 ___rparam_used 000001  
              __pcstackCOMRAM 0001             moveCursor@address 0008                  _clearDisplay 100A  
               putStringLCD@i 0009         __end_of_spi_Send_Read 1074                       ?_fliplr 0001  
           displayCtrl@cursor 0003                       _SSP2BUF 000F03          __end_of_readBusyFlag 1062  
                     __Hparam 0000                       __Lparam 0000                     ?_putchLCD 0001  
                __psmallconst 0E00               __size_of_fliplr 0052                displayCtrl@BCD 0006  
                     __pcinit 1074                       __ramtop 0E00                       __ptext0 0FA4  
                     __ptext1 0E60                       __ptext2 0FDA                       __ptext3 0F6C  
                     __ptext4 0E0E                       __ptext5 102C                       __ptext6 0F2E  
                     __ptext7 0EEE                       __ptext8 0EAA                       __ptext9 100A  
  __end_of_initialisation_LCD 1048    __end_of_initialisation_SPI 0F6C          end_of_initialization 1074  
         _initialisation_PORT 0EEE                    _moveCursor 0F6C                    ??_putchLCD 0004  
        ?_initialisation_PORT 0001                     _RPOR22_23 000E1D                     _RPOR24_25 000E1E  
        readBusyFlag@retValue 0002                     _TRISCbits 000F94                     _TRISDbits 000F95  
               moveCursor@col 0006                 moveCursor@row 0004                    main@status 000B  
               ??_displayCtrl 0005         ??_initialisation_PORT 0001                 ?_putStringLCD 0005  
              __end_of_fliplr 0E60           start_initialization 1074         __size_of_readBusyFlag 001A  
                 ?_moveCursor 0004                ??_putStringLCD 0007                      ??_fliplr 0001  
         __end_of_displayCtrl 0EEE                  _readBusyFlag 1048              displayCtrl@blink 0004  
           __size_of_putchLCD 0030           __size_of_moveCursor 0038                   __smallconst 0E00  
          displayCtrl@display 0005        __size_of_spi_Send_Read 0012                      _LATDbits 000F8C  
          _initialisation_LCD 102C            _initialisation_SPI 0F2E              __CFG_WDTPS$32768 000000  
         ?_initialisation_LCD 0001           ?_initialisation_SPI 0001                      _SSP2CON1 000F19  
                    _SSP2CON3 000F39                   _displayCtrl 0EAA                      _SSP2STAT 000F1A  
        ??_initialisation_LCD 0007          ??_initialisation_SPI 0001          __end_of_putStringLCD 0EAA  
                    __Hrparam 0000                      __Lrparam 0000                  __Lsmallconst 0E00  
               _spi_Send_Read 1062                 ?_clearDisplay 0001                      __ptext10 1048  
                    __ptext11 1062                  ??_moveCursor 0008                 __size_of_main 0036  
 __end_of_initialisation_PORT 0F2E                ?_spi_Send_Read 0001                      _putchLCD 0FDA  
                _SSP2STATbits 000F1A            __end_of_moveCursor 0FA4                ??_clearDisplay 0003  
                  _RPINR12_13 000E30         __size_of_putStringLCD 004A               ??_spi_Send_Read 0001  
