

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Nov 30 13:29:19 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F67J94
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    22  0000                     _RPINR12_13	set	3632
    23  0000                     _RPOR22_23	set	3613
    24  0000                     _RPOR24_25	set	3614
    25  0000                     _SSP2BUF	set	3843
    26  0000                     _SSP2CON1	set	3865
    27  0000                     _SSP2CON3	set	3897
    28  0000                     _SSP2STAT	set	3866
    29  0000                     _SSP2STATbits	set	3866
    30  0000                     _LATDbits	set	3980
    31  0000                     _OSCCON	set	4051
    32  0000                     _TRISCbits	set	3988
    33  0000                     _TRISDbits	set	3989
    34                           
    35                           	psect	smallconst
    36  000E00                     __psmallconst:
    37                           	opt stack 0
    38  000E00  00                 	db	0
    39  000E01                     STR_1:
    40                           
    41                           ; BSR set to: 15
    42  000E01  77                 	db	119	;'w'
    43  000E02  6F                 	db	111	;'o'
    44  000E03  72                 	db	114	;'r'
    45  000E04  6C                 	db	108	;'l'
    46  000E05  64                 	db	100	;'d'
    47  000E06  00                 	db	0
    48  0000                     
    49                           ; #config settings
    50  000E07  00                 	db	0	; dummy byte at the end
    51  0000                     
    52                           	psect	cinit
    53  001136                     __pcinit:
    54                           	opt stack 0
    55  001136                     start_initialization:
    56                           	opt stack 0
    57  001136                     __initialization:
    58                           	opt stack 0
    59  001136                     end_of_initialization:
    60                           	opt stack 0
    61  001136                     __end_of__initialization:
    62                           	opt stack 0
    63  001136  0E00               	movlw	low (__Lsmallconst shr (0+16))
    64  001138  6EF8               	movwf	tblptru,c
    65  00113A  0E0E               	movlw	high __Lsmallconst
    66  00113C  6EF7               	movwf	tblptrh,c
    67  00113E  0100               	movlb	0
    68  001140  EF04  F007         	goto	_main	;jump to C main() function
    69                           tblptru	equ	0xFF8
    70                           tblptrh	equ	0xFF7
    71                           
    72                           	psect	cstackCOMRAM
    73  000001                     __pcstackCOMRAM:
    74                           	opt stack 0
    75  000001                     ??_fliplr:
    76  000001                     ??_initialisation_PORT:
    77  000001                     spi_Send_Read@byte:
    78                           	opt stack 0
    79                           
    80                           ; 1 bytes @ 0x0
    81  000001                     	ds	1
    82  000002                     readBusyFlag@retValue:
    83                           	opt stack 0
    84                           
    85                           ; 1 bytes @ 0x1
    86  000002                     	ds	1
    87  000003                     displayCtrl@cursor:
    88                           	opt stack 0
    89  000003                     fliplr@input:
    90                           	opt stack 0
    91                           
    92                           ; 1 bytes @ 0x2
    93  000003                     	ds	1
    94  000004                     displayCtrl@blink:
    95                           	opt stack 0
    96  000004                     putchLCD@input:
    97                           	opt stack 0
    98  000004                     moveCursor@row:
    99                           	opt stack 0
   100                           
   101                           ; 2 bytes @ 0x3
   102  000004                     	ds	1
   103  000005                     displayCtrl@display:
   104                           	opt stack 0
   105  000005                     putStringLCD@input:
   106                           	opt stack 0
   107                           
   108                           ; 2 bytes @ 0x4
   109  000005                     	ds	1
   110  000006                     displayCtrl@BCD:
   111                           	opt stack 0
   112  000006                     moveCursor@col:
   113                           	opt stack 0
   114                           
   115                           ; 2 bytes @ 0x5
   116  000006                     	ds	1
   117  000007                     ??_putStringLCD:
   118                           
   119                           ; 1 bytes @ 0x6
   120  000007                     	ds	1
   121  000008                     moveCursor@address:
   122                           	opt stack 0
   123                           
   124                           ; 1 bytes @ 0x7
   125  000008                     	ds	1
   126  000009                     putStringLCD@i:
   127                           	opt stack 0
   128                           
   129                           ; 2 bytes @ 0x8
   130  000009                     	ds	2
   131  00000B                     main@status:
   132                           	opt stack 0
   133                           
   134                           ; 1 bytes @ 0xA
   135  00000B                     	ds	1
   136                           tblptru	equ	0xFF8
   137                           tblptrh	equ	0xFF7
   138                           
   139 ;;
   140 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   141 ;;
   142 ;; *************** function _main *****************
   143 ;; Defined at:
   144 ;;		line 4 in file "main.c"
   145 ;; Parameters:    Size  Location     Type
   146 ;;		None
   147 ;; Auto vars:     Size  Location     Type
   148 ;;  data            5    0        unsigned char [5]
   149 ;;  i               2    0        int 
   150 ;;  status          1   10[COMRAM] unsigned char 
   151 ;; Return value:  Size  Location     Type
   152 ;;                  1    wreg      void 
   153 ;; Registers used:
   154 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   155 ;; Tracked objects:
   156 ;;		On entry : 0/0
   157 ;;		On exit  : 0/0
   158 ;;		Unchanged: 0/0
   159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   161 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   163 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   164 ;;Total ram usage:        1 bytes
   165 ;; Hardware stack levels required when called:    4
   166 ;; This function calls:
   167 ;;		_initialisation_LCD
   168 ;;		_moveCursor
   169 ;;		_putStringLCD
   170 ;; This function is called by:
   171 ;;		Startup code after reset
   172 ;; This function uses a non-reentrant model
   173 ;;
   174                           
   175                           	psect	text0
   176  000E08                     __ptext0:
   177                           	opt stack 0
   178  000E08                     _main:
   179                           	opt stack 27
   180                           
   181                           ;main.c: 6: unsigned char status = 0;
   182                           
   183                           ; BSR set to: 15
   184                           ;incstack = 0
   185  000E08  0E00               	movlw	0
   186  000E0A  6E0B               	movwf	main@status,c
   187                           
   188                           ;main.c: 7: unsigned char data[5];
   189                           ;main.c: 8: int i;
   190                           ;main.c: 13: initialisation_LCD();
   191  000E0C  EC77  F008         	call	_initialisation_LCD	;wreg free
   192                           
   193                           ;main.c: 18: moveCursor(0, 0);
   194  000E10  0E00               	movlw	0
   195  000E12  6E05               	movwf	moveCursor@row+1,c
   196  000E14  0E00               	movlw	0
   197  000E16  6E04               	movwf	moveCursor@row,c
   198  000E18  0E00               	movlw	0
   199  000E1A  6E07               	movwf	moveCursor@col+1,c
   200  000E1C  0E00               	movlw	0
   201  000E1E  6E06               	movwf	moveCursor@col,c
   202  000E20  ECA2  F007         	call	_moveCursor	;wreg free
   203                           
   204                           ;main.c: 19: putStringLCD("world");
   205  000E24  0E01               	movlw	low STR_1
   206  000E26  6E05               	movwf	putStringLCD@input,c
   207  000E28  0E0E               	movlw	high STR_1
   208  000E2A  6E06               	movwf	putStringLCD@input+1,c
   209  000E2C  ECC8  F007         	call	_putStringLCD	;wreg free
   210                           
   211                           ;main.c: 20: moveCursor(1, 4);
   212  000E30  0E00               	movlw	0
   213  000E32  6E05               	movwf	moveCursor@row+1,c
   214  000E34  0E01               	movlw	1
   215  000E36  6E04               	movwf	moveCursor@row,c
   216  000E38  0E00               	movlw	0
   217  000E3A  6E07               	movwf	moveCursor@col+1,c
   218  000E3C  0E04               	movlw	4
   219  000E3E  6E06               	movwf	moveCursor@col,c
   220  000E40  ECA2  F007         	call	_moveCursor	;wreg free
   221                           
   222                           ;main.c: 21: putStringLCD("world");
   223  000E44  0E01               	movlw	low STR_1
   224  000E46  6E05               	movwf	putStringLCD@input,c
   225  000E48  0E0E               	movlw	high STR_1
   226  000E4A  6E06               	movwf	putStringLCD@input+1,c
   227  000E4C  ECC8  F007         	call	_putStringLCD	;wreg free
   228                           
   229                           ;main.c: 22: moveCursor(2, 8);
   230  000E50  0E00               	movlw	0
   231  000E52  6E05               	movwf	moveCursor@row+1,c
   232  000E54  0E02               	movlw	2
   233  000E56  6E04               	movwf	moveCursor@row,c
   234  000E58  0E00               	movlw	0
   235  000E5A  6E07               	movwf	moveCursor@col+1,c
   236  000E5C  0E08               	movlw	8
   237  000E5E  6E06               	movwf	moveCursor@col,c
   238  000E60  ECA2  F007         	call	_moveCursor	;wreg free
   239                           
   240                           ;main.c: 23: putStringLCD("world");
   241  000E64  0E01               	movlw	low STR_1
   242  000E66  6E05               	movwf	putStringLCD@input,c
   243  000E68  0E0E               	movlw	high STR_1
   244  000E6A  6E06               	movwf	putStringLCD@input+1,c
   245  000E6C  ECC8  F007         	call	_putStringLCD	;wreg free
   246                           
   247                           ;main.c: 24: moveCursor(3, 12);
   248  000E70  0E00               	movlw	0
   249  000E72  6E05               	movwf	moveCursor@row+1,c
   250  000E74  0E03               	movlw	3
   251  000E76  6E04               	movwf	moveCursor@row,c
   252  000E78  0E00               	movlw	0
   253  000E7A  6E07               	movwf	moveCursor@col+1,c
   254  000E7C  0E0C               	movlw	12
   255  000E7E  6E06               	movwf	moveCursor@col,c
   256  000E80  ECA2  F007         	call	_moveCursor	;wreg free
   257                           
   258                           ;main.c: 25: putStringLCD("world");
   259  000E84  0E01               	movlw	low STR_1
   260  000E86  6E05               	movwf	putStringLCD@input,c
   261  000E88  0E0E               	movlw	high STR_1
   262  000E8A  6E06               	movwf	putStringLCD@input+1,c
   263  000E8C  ECC8  F007         	call	_putStringLCD	;wreg free
   264                           
   265                           ;main.c: 26: moveCursor(3, 2);
   266  000E90  0E00               	movlw	0
   267  000E92  6E05               	movwf	moveCursor@row+1,c
   268  000E94  0E03               	movlw	3
   269  000E96  6E04               	movwf	moveCursor@row,c
   270  000E98  0E00               	movlw	0
   271  000E9A  6E07               	movwf	moveCursor@col+1,c
   272  000E9C  0E02               	movlw	2
   273  000E9E  6E06               	movwf	moveCursor@col,c
   274  000EA0  ECA2  F007         	call	_moveCursor	;wreg free
   275                           
   276                           ;main.c: 27: putStringLCD("world");
   277  000EA4  0E01               	movlw	low STR_1
   278  000EA6  6E05               	movwf	putStringLCD@input,c
   279  000EA8  0E0E               	movlw	high STR_1
   280  000EAA  6E06               	movwf	putStringLCD@input+1,c
   281  000EAC  ECC8  F007         	call	_putStringLCD	;wreg free
   282                           
   283                           ;main.c: 28: moveCursor(3, 2);
   284  000EB0  0E00               	movlw	0
   285  000EB2  6E05               	movwf	moveCursor@row+1,c
   286  000EB4  0E03               	movlw	3
   287  000EB6  6E04               	movwf	moveCursor@row,c
   288  000EB8  0E00               	movlw	0
   289  000EBA  6E07               	movwf	moveCursor@col+1,c
   290  000EBC  0E02               	movlw	2
   291  000EBE  6E06               	movwf	moveCursor@col,c
   292  000EC0  ECA2  F007         	call	_moveCursor	;wreg free
   293                           
   294                           ;main.c: 29: putStringLCD("world");
   295  000EC4  0E01               	movlw	low STR_1
   296  000EC6  6E05               	movwf	putStringLCD@input,c
   297  000EC8  0E0E               	movlw	high STR_1
   298  000ECA  6E06               	movwf	putStringLCD@input+1,c
   299  000ECC  ECC8  F007         	call	_putStringLCD	;wreg free
   300                           
   301                           ;main.c: 30: moveCursor(3, 2);
   302  000ED0  0E00               	movlw	0
   303  000ED2  6E05               	movwf	moveCursor@row+1,c
   304  000ED4  0E03               	movlw	3
   305  000ED6  6E04               	movwf	moveCursor@row,c
   306  000ED8  0E00               	movlw	0
   307  000EDA  6E07               	movwf	moveCursor@col+1,c
   308  000EDC  0E02               	movlw	2
   309  000EDE  6E06               	movwf	moveCursor@col,c
   310  000EE0  ECA2  F007         	call	_moveCursor	;wreg free
   311                           
   312                           ;main.c: 31: putStringLCD("world");
   313  000EE4  0E01               	movlw	low STR_1
   314  000EE6  6E05               	movwf	putStringLCD@input,c
   315  000EE8  0E0E               	movlw	high STR_1
   316  000EEA  6E06               	movwf	putStringLCD@input+1,c
   317  000EEC  ECC8  F007         	call	_putStringLCD	;wreg free
   318  000EF0                     l9:
   319                           
   320                           ;main.c: 33: {
   321  000EF0  D7FF               	goto	l9
   322  000EF2                     __end_of_main:
   323                           	opt stack 0
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           
   327 ;; *************** function _putStringLCD *****************
   328 ;; Defined at:
   329 ;;		line 48 in file "LCD_SPI.c"
   330 ;; Parameters:    Size  Location     Type
   331 ;;  input           2    4[COMRAM] PTR const unsigned char 
   332 ;;		 -> STR_7(6), STR_6(6), STR_5(6), STR_4(6), 
   333 ;;		 -> STR_3(6), STR_2(6), STR_1(6), 
   334 ;; Auto vars:     Size  Location     Type
   335 ;;  i               2    8[COMRAM] int 
   336 ;; Return value:  Size  Location     Type
   337 ;;                  1    wreg      void 
   338 ;; Registers used:
   339 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   340 ;; Tracked objects:
   341 ;;		On entry : 0/0
   342 ;;		On exit  : 0/0
   343 ;;		Unchanged: 0/0
   344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   345 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   346 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   347 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   348 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   349 ;;Total ram usage:        6 bytes
   350 ;; Hardware stack levels used:    1
   351 ;; Hardware stack levels required when called:    3
   352 ;; This function calls:
   353 ;;		_putchLCD
   354 ;; This function is called by:
   355 ;;		_main
   356 ;; This function uses a non-reentrant model
   357 ;;
   358                           
   359                           	psect	text1
   360  000F90                     __ptext1:
   361                           	opt stack 0
   362  000F90                     _putStringLCD:
   363                           	opt stack 27
   364                           
   365                           ;LCD_SPI.c: 50: int i;
   366                           ;LCD_SPI.c: 51: for (i = 0; input[i] != '\0'; i++)
   367                           
   368                           ;incstack = 0
   369  000F90  0E00               	movlw	0
   370  000F92  6E0A               	movwf	putStringLCD@i+1,c
   371  000F94  0E00               	movlw	0
   372  000F96  6E09               	movwf	putStringLCD@i,c
   373  000F98  D010               	goto	l921
   374  000F9A                     l917:
   375                           
   376                           ;LCD_SPI.c: 52: {
   377                           ;LCD_SPI.c: 53: putchLCD(input[i]);
   378  000F9A  5009               	movf	putStringLCD@i,w,c
   379  000F9C  2405               	addwf	putStringLCD@input,w,c
   380  000F9E  6E07               	movwf	??_putStringLCD& (0+255),c
   381  000FA0  500A               	movf	putStringLCD@i+1,w,c
   382  000FA2  2006               	addwfc	putStringLCD@input+1,w,c
   383  000FA4  6E08               	movwf	(??_putStringLCD+1)& (0+255),c
   384  000FA6  C007  FFF6         	movff	??_putStringLCD,tblptrl
   385  000FAA  C008  FFF7         	movff	??_putStringLCD+1,tblptrh
   386  000FAE                     	if	0	;tblptru may be non-zero
   387  000FAE                     	endif
   388  000FAE                     	if	0	;tblptru may be non-zero
   389  000FAE                     	endif
   390  000FAE  0008               	tblrd		*
   391  000FB0  50F5               	movf	tablat,w,c
   392  000FB2  EC4E  F008         	call	_putchLCD
   393  000FB6  4A09               	infsnz	putStringLCD@i,f,c
   394  000FB8  2A0A               	incf	putStringLCD@i+1,f,c
   395  000FBA                     l921:
   396  000FBA  5009               	movf	putStringLCD@i,w,c
   397  000FBC  2405               	addwf	putStringLCD@input,w,c
   398  000FBE  6E07               	movwf	??_putStringLCD& (0+255),c
   399  000FC0  500A               	movf	putStringLCD@i+1,w,c
   400  000FC2  2006               	addwfc	putStringLCD@input+1,w,c
   401  000FC4  6E08               	movwf	(??_putStringLCD+1)& (0+255),c
   402  000FC6  C007  FFF6         	movff	??_putStringLCD,tblptrl
   403  000FCA  C008  FFF7         	movff	??_putStringLCD+1,tblptrh
   404  000FCE                     	if	0	;tblptru may be non-zero
   405  000FCE                     	endif
   406  000FCE                     	if	0	;tblptru may be non-zero
   407  000FCE                     	endif
   408  000FCE  0008               	tblrd		*
   409  000FD0  50F5               	movf	tablat,w,c
   410  000FD2  0900               	iorlw	0
   411  000FD4  B4D8               	btfsc	status,2,c
   412  000FD6  0012               	return	
   413  000FD8  D7E0               	goto	l917
   414  000FDA                     __end_of_putStringLCD:
   415                           	opt stack 0
   416                           tblptru	equ	0xFF8
   417                           tblptrh	equ	0xFF7
   418                           tblptrl	equ	0xFF6
   419                           tablat	equ	0xFF5
   420                           status	equ	0xFD8
   421                           
   422 ;; *************** function _putchLCD *****************
   423 ;; Defined at:
   424 ;;		line 57 in file "LCD_SPI.c"
   425 ;; Parameters:    Size  Location     Type
   426 ;;  input           1    wreg     unsigned char 
   427 ;; Auto vars:     Size  Location     Type
   428 ;;  input           1    3[COMRAM] unsigned char 
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      void 
   431 ;; Registers used:
   432 ;;		wreg, status,2, status,0, cstack
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   439 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   441 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   442 ;;Total ram usage:        1 bytes
   443 ;; Hardware stack levels used:    1
   444 ;; Hardware stack levels required when called:    2
   445 ;; This function calls:
   446 ;;		_fliplr
   447 ;;		_readBusyFlag
   448 ;;		_spi_Send_Read
   449 ;; This function is called by:
   450 ;;		_putStringLCD
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454                           	psect	text2
   455  00109C                     __ptext2:
   456                           	opt stack 0
   457  00109C                     _putchLCD:
   458                           	opt stack 27
   459                           
   460                           ;incstack = 0
   461                           ;putchLCD@input stored from wreg
   462  00109C  6E04               	movwf	putchLCD@input,c
   463                           
   464                           ;LCD_SPI.c: 59: input = fliplr(input);
   465  00109E  5004               	movf	putchLCD@input,w,c
   466  0010A0  EC79  F007         	call	_fliplr
   467  0010A4  6E04               	movwf	putchLCD@input,c
   468  0010A6                     l761:
   469  0010A6  EC85  F008         	call	_readBusyFlag	;wreg free
   470  0010AA  0900               	iorlw	0
   471  0010AC  A4D8               	btfss	status,2,c
   472  0010AE  D7FB               	goto	l761
   473                           
   474                           ;LCD_SPI.c: 62: LATDbits.LATD3 = 0;
   475  0010B0  968C               	bcf	3980,3,c	;volatile
   476                           
   477                           ;LCD_SPI.c: 63: spi_Send_Read(0xFA);
   478  0010B2  0EFA               	movlw	250
   479  0010B4  EC92  F008         	call	_spi_Send_Read
   480                           
   481                           ;LCD_SPI.c: 64: spi_Send_Read(input & 0xF0);
   482  0010B8  5004               	movf	putchLCD@input,w,c
   483  0010BA  0BF0               	andlw	240
   484  0010BC  EC92  F008         	call	_spi_Send_Read
   485                           
   486                           ;LCD_SPI.c: 65: spi_Send_Read(input << 4);
   487  0010C0  3804               	swapf	putchLCD@input,w,c
   488  0010C2  0BF0               	andlw	240
   489  0010C4  EC92  F008         	call	_spi_Send_Read
   490                           
   491                           ;LCD_SPI.c: 66: LATDbits.LATD3 = 1;
   492  0010C8  868C               	bsf	3980,3,c	;volatile
   493  0010CA  0012               	return		;funcret
   494  0010CC                     __end_of_putchLCD:
   495                           	opt stack 0
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           status	equ	0xFD8
   501                           
   502 ;; *************** function _moveCursor *****************
   503 ;; Defined at:
   504 ;;		line 78 in file "LCD_SPI.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;  row             2    3[COMRAM] int 
   507 ;;  col             2    5[COMRAM] int 
   508 ;; Auto vars:     Size  Location     Type
   509 ;;  address         1    7[COMRAM] unsigned char 
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      void 
   512 ;; Registers used:
   513 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   519 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   520 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   522 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   523 ;;Total ram usage:        5 bytes
   524 ;; Hardware stack levels used:    1
   525 ;; Hardware stack levels required when called:    2
   526 ;; This function calls:
   527 ;;		_fliplr
   528 ;;		_readBusyFlag
   529 ;;		_spi_Send_Read
   530 ;; This function is called by:
   531 ;;		_main
   532 ;; This function uses a non-reentrant model
   533 ;;
   534                           
   535                           	psect	text3
   536  000F44                     __ptext3:
   537                           	opt stack 0
   538  000F44                     _moveCursor:
   539                           	opt stack 28
   540                           
   541                           ;LCD_SPI.c: 80: char address = row * 20 + col;
   542                           
   543                           ;incstack = 0
   544  000F44  5004               	movf	moveCursor@row,w,c
   545  000F46  0D14               	mullw	20
   546  000F48  50F3               	movf	prodl,w,c
   547  000F4A  2406               	addwf	moveCursor@col,w,c
   548  000F4C  6E08               	movwf	moveCursor@address,c
   549                           
   550                           ;LCD_SPI.c: 81: if (row >= 2)
   551  000F4E  BE05               	btfsc	moveCursor@row+1,7,c
   552  000F50  D008               	goto	l905
   553  000F52  5005               	movf	moveCursor@row+1,w,c
   554  000F54  E104               	bnz	u110
   555  000F56  0E02               	movlw	2
   556  000F58  5C04               	subwf	moveCursor@row,w,c
   557  000F5A  A0D8               	btfss	status,0,c
   558  000F5C  D002               	goto	l905
   559  000F5E                     u110:
   560                           
   561                           ;LCD_SPI.c: 82: {
   562                           ;LCD_SPI.c: 83: address += 24;
   563  000F5E  0E18               	movlw	24
   564  000F60  2608               	addwf	moveCursor@address,f,c
   565  000F62                     l905:
   566                           
   567                           ;LCD_SPI.c: 84: }
   568                           ;LCD_SPI.c: 85: address = fliplr(address);
   569  000F62  5008               	movf	moveCursor@address,w,c
   570  000F64  EC79  F007         	call	_fliplr
   571  000F68  6E08               	movwf	moveCursor@address,c
   572  000F6A                     l907:
   573  000F6A  EC85  F008         	call	_readBusyFlag	;wreg free
   574  000F6E  0900               	iorlw	0
   575  000F70  A4D8               	btfss	status,2,c
   576  000F72  D7FB               	goto	l907
   577                           
   578                           ;LCD_SPI.c: 87: LATDbits.LATD3 = 0;
   579  000F74  968C               	bcf	3980,3,c	;volatile
   580                           
   581                           ;LCD_SPI.c: 88: spi_Send_Read(0xF8);
   582  000F76  0EF8               	movlw	248
   583  000F78  EC92  F008         	call	_spi_Send_Read
   584                           
   585                           ;LCD_SPI.c: 89: spi_Send_Read(address & 0xF0);
   586  000F7C  5008               	movf	moveCursor@address,w,c
   587  000F7E  0BF0               	andlw	240
   588  000F80  EC92  F008         	call	_spi_Send_Read
   589                           
   590                           ;LCD_SPI.c: 90: spi_Send_Read((address << 4) | 0x10);
   591  000F84  3808               	swapf	moveCursor@address,w,c
   592  000F86  0BF0               	andlw	240
   593  000F88  0910               	iorlw	16
   594  000F8A  EC92  F008         	call	_spi_Send_Read
   595  000F8E  0012               	return		;funcret
   596  000F90                     __end_of_moveCursor:
   597                           	opt stack 0
   598                           tblptru	equ	0xFF8
   599                           tblptrh	equ	0xFF7
   600                           tblptrl	equ	0xFF6
   601                           tablat	equ	0xFF5
   602                           prodl	equ	0xFF3
   603                           status	equ	0xFD8
   604                           
   605 ;; *************** function _fliplr *****************
   606 ;; Defined at:
   607 ;;		line 69 in file "LCD_SPI.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;  input           1    wreg     unsigned char 
   610 ;; Auto vars:     Size  Location     Type
   611 ;;  input           1    2[COMRAM] unsigned char 
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      unsigned char 
   614 ;; Registers used:
   615 ;;		wreg, status,2, status,0
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   623 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   624 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   625 ;;Total ram usage:        3 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; This function calls:
   628 ;;		Nothing
   629 ;; This function is called by:
   630 ;;		_putchLCD
   631 ;;		_moveCursor
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           	psect	text4
   636  000EF2                     __ptext4:
   637                           	opt stack 0
   638  000EF2                     _fliplr:
   639                           	opt stack 28
   640                           
   641                           ;incstack = 0
   642                           ;fliplr@input stored from wreg
   643  000EF2  6E03               	movwf	fliplr@input,c
   644                           
   645                           ;LCD_SPI.c: 72: input = (input & 0xF0) >> 4 | (input & 0x0F) << 4;
   646  000EF4  C003  F001         	movff	fliplr@input,??_fliplr
   647  000EF8  0E0F               	movlw	15
   648  000EFA  1601               	andwf	??_fliplr,f,c
   649  000EFC  3A01               	swapf	??_fliplr,f,c
   650  000EFE  0EF0               	movlw	240
   651  000F00  1601               	andwf	??_fliplr,f,c
   652  000F02  3803               	swapf	fliplr@input,w,c
   653  000F04  0B0F               	andlw	15
   654  000F06  0B0F               	andlw	15
   655  000F08  1001               	iorwf	??_fliplr,w,c
   656  000F0A  6E03               	movwf	fliplr@input,c
   657                           
   658                           ;LCD_SPI.c: 73: input = (input & 0xCC) >> 2 | (input & 0x33) << 2;
   659  000F0C  C003  F001         	movff	fliplr@input,??_fliplr
   660  000F10  0E33               	movlw	51
   661  000F12  1601               	andwf	??_fliplr,f,c
   662  000F14  90D8               	bcf	status,0,c
   663  000F16  3601               	rlcf	??_fliplr,f,c
   664  000F18  90D8               	bcf	status,0,c
   665  000F1A  3601               	rlcf	??_fliplr,f,c
   666  000F1C  4003               	rrncf	fliplr@input,w,c
   667  000F1E  42E8               	rrncf	wreg,f,c
   668  000F20  0B3F               	andlw	63
   669  000F22  0B33               	andlw	51
   670  000F24  1001               	iorwf	??_fliplr,w,c
   671  000F26  6E03               	movwf	fliplr@input,c
   672                           
   673                           ;LCD_SPI.c: 74: input = (input & 0xAA) >> 1 | (input & 0x55) << 1;
   674  000F28  C003  F001         	movff	fliplr@input,??_fliplr
   675  000F2C  0E55               	movlw	85
   676  000F2E  1601               	andwf	??_fliplr,f,c
   677  000F30  90D8               	bcf	status,0,c
   678  000F32  3401               	rlcf	??_fliplr,w,c
   679  000F34  6E02               	movwf	(??_fliplr+1)& (0+255),c
   680  000F36  90D8               	bcf	status,0,c
   681  000F38  3003               	rrcf	fliplr@input,w,c
   682  000F3A  0B55               	andlw	85
   683  000F3C  1002               	iorwf	??_fliplr+1,w,c
   684  000F3E  6E03               	movwf	fliplr@input,c
   685                           
   686                           ;LCD_SPI.c: 76: return input;
   687  000F40  5003               	movf	fliplr@input,w,c
   688  000F42  0012               	return	
   689  000F44                     __end_of_fliplr:
   690                           	opt stack 0
   691                           tblptru	equ	0xFF8
   692                           tblptrh	equ	0xFF7
   693                           tblptrl	equ	0xFF6
   694                           tablat	equ	0xFF5
   695                           prodl	equ	0xFF3
   696                           wreg	equ	0xFE8
   697                           status	equ	0xFD8
   698                           
   699 ;; *************** function _initialisation_LCD *****************
   700 ;; Defined at:
   701 ;;		line 149 in file "LCD_SPI.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;		None
   704 ;; Auto vars:     Size  Location     Type
   705 ;;		None
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		wreg, status,2, status,0, cstack
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   719 ;;Total ram usage:        0 bytes
   720 ;; Hardware stack levels used:    1
   721 ;; Hardware stack levels required when called:    3
   722 ;; This function calls:
   723 ;;		_clearDisplay
   724 ;;		_displayCtrl
   725 ;;		_initialisation_PORT
   726 ;;		_initialisation_SPI
   727 ;; This function is called by:
   728 ;;		_main
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732                           	psect	text5
   733  0010EE                     __ptext5:
   734                           	opt stack 0
   735  0010EE                     _initialisation_LCD:
   736                           	opt stack 27
   737                           
   738                           ;LCD_SPI.c: 151: initialisation_PORT();
   739                           
   740                           ;incstack = 0
   741  0010EE  EC0F  F008         	call	_initialisation_PORT	;wreg free
   742                           
   743                           ;LCD_SPI.c: 152: initialisation_SPI();
   744  0010F2  EC2F  F008         	call	_initialisation_SPI	;wreg free
   745                           
   746                           ;LCD_SPI.c: 153: clearDisplay();
   747  0010F6  EC66  F008         	call	_clearDisplay	;wreg free
   748                           
   749                           ;LCD_SPI.c: 154: displayCtrl(1,1,0);
   750  0010FA  0E01               	movlw	1
   751  0010FC  6E03               	movwf	displayCtrl@cursor,c
   752  0010FE  0E00               	movlw	0
   753  001100  6E04               	movwf	displayCtrl@blink,c
   754  001102  0E01               	movlw	1
   755  001104  ECED  F007         	call	_displayCtrl
   756  001108  0012               	return		;funcret
   757  00110A                     __end_of_initialisation_LCD:
   758                           	opt stack 0
   759                           tblptru	equ	0xFF8
   760                           tblptrh	equ	0xFF7
   761                           tblptrl	equ	0xFF6
   762                           tablat	equ	0xFF5
   763                           prodl	equ	0xFF3
   764                           wreg	equ	0xFE8
   765                           status	equ	0xFD8
   766                           
   767 ;; *************** function _initialisation_SPI *****************
   768 ;; Defined at:
   769 ;;		line 112 in file "LCD_SPI.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, status,2, status,0
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   787 ;;Total ram usage:        0 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; This function calls:
   790 ;;		Nothing
   791 ;; This function is called by:
   792 ;;		_initialisation_LCD
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           	psect	text6
   797  00105E                     __ptext6:
   798                           	opt stack 0
   799  00105E                     _initialisation_SPI:
   800                           	opt stack 29
   801                           
   802                           ;LCD_SPI.c: 116: RPOR24_25 |= 0x04;
   803                           
   804                           ;incstack = 0
   805  00105E  010E               	movlb	14	; () banked
   806  001060  851E               	bsf	30,2,b	;volatile
   807                           
   808                           ; BSR set to: 14
   809                           ;LCD_SPI.c: 117: RPOR24_25 &= 0xF4;
   810  001062  0EF4               	movlw	244
   811  001064  010E               	movlb	14	; () banked
   812  001066  171E               	andwf	30,f,b	;volatile
   813                           
   814                           ; BSR set to: 14
   815                           ;LCD_SPI.c: 119: RPOR22_23 |= 0x05;
   816  001068  0E05               	movlw	5
   817  00106A  010E               	movlb	14	; () banked
   818  00106C  131D               	iorwf	29,f,b	;volatile
   819                           
   820                           ; BSR set to: 14
   821                           ;LCD_SPI.c: 120: RPOR22_23 &= 0xF5;
   822  00106E  0EF5               	movlw	245
   823  001070  010E               	movlb	14	; () banked
   824  001072  171D               	andwf	29,f,b	;volatile
   825                           
   826                           ; BSR set to: 14
   827                           ;LCD_SPI.c: 122: RPINR12_13 |= 0x50;
   828  001074  0E50               	movlw	80
   829  001076  010E               	movlb	14	; () banked
   830  001078  1330               	iorwf	48,f,b	;volatile
   831                           
   832                           ; BSR set to: 14
   833                           ;LCD_SPI.c: 123: RPINR12_13 &= 0x5F;
   834  00107A  0E5F               	movlw	95
   835  00107C  010E               	movlb	14	; () banked
   836  00107E  1730               	andwf	48,f,b	;volatile
   837                           
   838                           ; BSR set to: 14
   839                           ;LCD_SPI.c: 126: SSP2CON1 &= 0xF1;
   840  001080  0EF1               	movlw	241
   841  001082  010F               	movlb	15	; () banked
   842  001084  1719               	andwf	25,f,b	;volatile
   843                           
   844                           ; BSR set to: 15
   845                           ;LCD_SPI.c: 127: SSP2CON1 |= 0x31;
   846  001086  0E31               	movlw	49
   847  001088  010F               	movlb	15	; () banked
   848  00108A  1319               	iorwf	25,f,b	;volatile
   849                           
   850                           ; BSR set to: 15
   851                           ;LCD_SPI.c: 128: SSP2STAT |= 0x80;
   852  00108C  010F               	movlb	15	; () banked
   853  00108E  8F1A               	bsf	26,7,b	;volatile
   854                           
   855                           ; BSR set to: 15
   856                           ;LCD_SPI.c: 129: SSP2STAT &= ~0x40;
   857  001090  010F               	movlb	15	; () banked
   858  001092  9D1A               	bcf	26,6,b	;volatile
   859                           
   860                           ; BSR set to: 15
   861                           ;LCD_SPI.c: 130: SSP2CON3 &= 0x8F;
   862  001094  0E8F               	movlw	143
   863  001096  010F               	movlb	15	; () banked
   864  001098  1739               	andwf	57,f,b	;volatile
   865                           
   866                           ; BSR set to: 15
   867  00109A  0012               	return		;funcret
   868  00109C                     __end_of_initialisation_SPI:
   869                           	opt stack 0
   870                           tblptru	equ	0xFF8
   871                           tblptrh	equ	0xFF7
   872                           tblptrl	equ	0xFF6
   873                           tablat	equ	0xFF5
   874                           prodl	equ	0xFF3
   875                           wreg	equ	0xFE8
   876                           status	equ	0xFD8
   877                           
   878 ;; *************** function _initialisation_PORT *****************
   879 ;; Defined at:
   880 ;;		line 134 in file "LCD_SPI.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;		None
   883 ;; Auto vars:     Size  Location     Type
   884 ;;		None
   885 ;; Return value:  Size  Location     Type
   886 ;;                  1    wreg      void 
   887 ;; Registers used:
   888 ;;		wreg, status,2, status,0
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   896 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   897 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   898 ;;Total ram usage:        1 bytes
   899 ;; Hardware stack levels used:    1
   900 ;; This function calls:
   901 ;;		Nothing
   902 ;; This function is called by:
   903 ;;		_initialisation_LCD
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907                           	psect	text7
   908  00101E                     __ptext7:
   909                           	opt stack 0
   910  00101E                     _initialisation_PORT:
   911                           	opt stack 29
   912                           
   913                           ;LCD_SPI.c: 136: OSCCON = OSCCON | 0b01110000;
   914                           
   915                           ; BSR set to: 15
   916                           ;incstack = 0
   917  00101E  50D3               	movf	4051,w,c	;volatile
   918  001020  0970               	iorlw	112
   919  001022  6ED3               	movwf	4051,c	;volatile
   920                           
   921                           ;LCD_SPI.c: 137: TRISDbits.TRISD4 = 0;
   922  001024  9895               	bcf	3989,4,c	;volatile
   923                           
   924                           ;LCD_SPI.c: 138: TRISDbits.TRISD2 = 0;
   925  001026  9495               	bcf	3989,2,c	;volatile
   926                           
   927                           ;LCD_SPI.c: 139: TRISDbits.TRISD3 = 0;
   928  001028  9695               	bcf	3989,3,c	;volatile
   929                           
   930                           ;LCD_SPI.c: 140: TRISDbits.TRISD1 = 1;
   931  00102A  8295               	bsf	3989,1,c	;volatile
   932                           
   933                           ;LCD_SPI.c: 141: TRISCbits.TRISC0 = 0;
   934  00102C  9094               	bcf	3988,0,c	;volatile
   935                           
   936                           ;LCD_SPI.c: 142: LATDbits.LATD3 = 1;
   937  00102E  868C               	bsf	3980,3,c	;volatile
   938                           
   939                           ;LCD_SPI.c: 143: __nop();
   940  001030  F000               	nop	
   941                           
   942                           ;LCD_SPI.c: 144: _delay((unsigned long)((33)*(8000000/4000.0)));
   943  001032  0E56               	movlw	86
   944  001034  6E01               	movwf	??_initialisation_PORT& (0+255),c
   945  001036  0EB6               	movlw	182
   946  001038                     u147:
   947  001038  2EE8               	decfsz	wreg,f,c
   948  00103A  D7FE               	goto	u147
   949  00103C  2E01               	decfsz	??_initialisation_PORT& (0+255),f,c
   950  00103E  D7FC               	goto	u147
   951                           
   952                           ;LCD_SPI.c: 145: _delay((unsigned long)((33)*(8000000/4000.0)));
   953  001040  0E56               	movlw	86
   954  001042  6E01               	movwf	??_initialisation_PORT& (0+255),c
   955  001044  0EB6               	movlw	182
   956  001046                     u157:
   957  001046  2EE8               	decfsz	wreg,f,c
   958  001048  D7FE               	goto	u157
   959  00104A  2E01               	decfsz	??_initialisation_PORT& (0+255),f,c
   960  00104C  D7FC               	goto	u157
   961                           
   962                           ;LCD_SPI.c: 146: _delay((unsigned long)((33)*(8000000/4000.0)));
   963  00104E  0E56               	movlw	86
   964  001050  6E01               	movwf	??_initialisation_PORT& (0+255),c
   965  001052  0EB6               	movlw	182
   966  001054                     u167:
   967  001054  2EE8               	decfsz	wreg,f,c
   968  001056  D7FE               	goto	u167
   969  001058  2E01               	decfsz	??_initialisation_PORT& (0+255),f,c
   970  00105A  D7FC               	goto	u167
   971  00105C  0012               	return		;funcret
   972  00105E                     __end_of_initialisation_PORT:
   973                           	opt stack 0
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           prodl	equ	0xFF3
   979                           wreg	equ	0xFE8
   980                           status	equ	0xFD8
   981                           
   982 ;; *************** function _displayCtrl *****************
   983 ;; Defined at:
   984 ;;		line 30 in file "LCD_SPI.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;  display         1    wreg     unsigned char 
   987 ;;  cursor          1    2[COMRAM] unsigned char 
   988 ;;  blink           1    3[COMRAM] unsigned char 
   989 ;; Auto vars:     Size  Location     Type
   990 ;;  display         1    4[COMRAM] unsigned char 
   991 ;;  BCD             1    5[COMRAM] unsigned char 
   992 ;; Return value:  Size  Location     Type
   993 ;;                  1    wreg      void 
   994 ;; Registers used:
   995 ;;		wreg, status,2, status,0, cstack
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1001 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1002 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1004 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1005 ;;Total ram usage:        4 bytes
  1006 ;; Hardware stack levels used:    1
  1007 ;; Hardware stack levels required when called:    2
  1008 ;; This function calls:
  1009 ;;		_readBusyFlag
  1010 ;;		_spi_Send_Read
  1011 ;; This function is called by:
  1012 ;;		_initialisation_LCD
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text8
  1017  000FDA                     __ptext8:
  1018                           	opt stack 0
  1019  000FDA                     _displayCtrl:
  1020                           	opt stack 27
  1021                           
  1022                           ;incstack = 0
  1023                           ;displayCtrl@display stored from wreg
  1024  000FDA  6E05               	movwf	displayCtrl@display,c
  1025                           
  1026                           ;LCD_SPI.c: 32: char BCD = blink;
  1027  000FDC  C004  F006         	movff	displayCtrl@blink,displayCtrl@BCD
  1028                           
  1029                           ;LCD_SPI.c: 33: BCD <<= 1;
  1030  000FE0  90D8               	bcf	status,0,c
  1031  000FE2  3606               	rlcf	displayCtrl@BCD,f,c
  1032                           
  1033                           ;LCD_SPI.c: 34: BCD += cursor;
  1034  000FE4  5003               	movf	displayCtrl@cursor,w,c
  1035  000FE6  2606               	addwf	displayCtrl@BCD,f,c
  1036                           
  1037                           ;LCD_SPI.c: 35: BCD <<= 1;
  1038  000FE8  90D8               	bcf	status,0,c
  1039  000FEA  3606               	rlcf	displayCtrl@BCD,f,c
  1040                           
  1041                           ;LCD_SPI.c: 36: BCD += display;
  1042  000FEC  5005               	movf	displayCtrl@display,w,c
  1043  000FEE  2606               	addwf	displayCtrl@BCD,f,c
  1044                           
  1045                           ;LCD_SPI.c: 37: BCD <<= 1;
  1046  000FF0  90D8               	bcf	status,0,c
  1047  000FF2  3606               	rlcf	displayCtrl@BCD,f,c
  1048                           
  1049                           ;LCD_SPI.c: 38: BCD += 1;
  1050  000FF4  2A06               	incf	displayCtrl@BCD,f,c
  1051                           
  1052                           ;LCD_SPI.c: 39: BCD <<= 4;
  1053  000FF6  3A06               	swapf	displayCtrl@BCD,f,c
  1054  000FF8  0EF0               	movlw	240
  1055  000FFA  1606               	andwf	displayCtrl@BCD,f,c
  1056  000FFC                     l891:
  1057  000FFC  EC85  F008         	call	_readBusyFlag	;wreg free
  1058  001000  0900               	iorlw	0
  1059  001002  A4D8               	btfss	status,2,c
  1060  001004  D7FB               	goto	l891
  1061                           
  1062                           ;LCD_SPI.c: 42: LATDbits.LATD3 = 0;
  1063  001006  968C               	bcf	3980,3,c	;volatile
  1064                           
  1065                           ;LCD_SPI.c: 43: spi_Send_Read(0xF8);
  1066  001008  0EF8               	movlw	248
  1067  00100A  EC92  F008         	call	_spi_Send_Read
  1068                           
  1069                           ;LCD_SPI.c: 44: spi_Send_Read(BCD);
  1070  00100E  5006               	movf	displayCtrl@BCD,w,c
  1071  001010  EC92  F008         	call	_spi_Send_Read
  1072                           
  1073                           ;LCD_SPI.c: 45: spi_Send_Read(0x00);
  1074  001014  0E00               	movlw	0
  1075  001016  EC92  F008         	call	_spi_Send_Read
  1076                           
  1077                           ;LCD_SPI.c: 46: LATDbits.LATD3 = 1;
  1078  00101A  868C               	bsf	3980,3,c	;volatile
  1079  00101C  0012               	return		;funcret
  1080  00101E                     __end_of_displayCtrl:
  1081                           	opt stack 0
  1082                           tblptru	equ	0xFF8
  1083                           tblptrh	equ	0xFF7
  1084                           tblptrl	equ	0xFF6
  1085                           tablat	equ	0xFF5
  1086                           prodl	equ	0xFF3
  1087                           wreg	equ	0xFE8
  1088                           status	equ	0xFD8
  1089                           
  1090 ;; *************** function _clearDisplay *****************
  1091 ;; Defined at:
  1092 ;;		line 18 in file "LCD_SPI.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;		None
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;		None
  1097 ;; Return value:  Size  Location     Type
  1098 ;;                  1    wreg      void 
  1099 ;; Registers used:
  1100 ;;		wreg, status,2, status,0, cstack
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1110 ;;Total ram usage:        0 bytes
  1111 ;; Hardware stack levels used:    1
  1112 ;; Hardware stack levels required when called:    2
  1113 ;; This function calls:
  1114 ;;		_readBusyFlag
  1115 ;;		_spi_Send_Read
  1116 ;; This function is called by:
  1117 ;;		_initialisation_LCD
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121                           	psect	text9
  1122  0010CC                     __ptext9:
  1123                           	opt stack 0
  1124  0010CC                     _clearDisplay:
  1125                           	opt stack 27
  1126  0010CC                     l739:
  1127  0010CC  EC85  F008         	call	_readBusyFlag	;wreg free
  1128  0010D0  0900               	iorlw	0
  1129  0010D2  A4D8               	btfss	status,2,c
  1130  0010D4  D7FB               	goto	l739
  1131                           
  1132                           ;LCD_SPI.c: 22: LATDbits.LATD3 = 0;
  1133  0010D6  968C               	bcf	3980,3,c	;volatile
  1134                           
  1135                           ;LCD_SPI.c: 23: spi_Send_Read(0xF8);
  1136  0010D8  0EF8               	movlw	248
  1137  0010DA  EC92  F008         	call	_spi_Send_Read
  1138                           
  1139                           ;LCD_SPI.c: 24: spi_Send_Read(0x80);
  1140  0010DE  0E80               	movlw	128
  1141  0010E0  EC92  F008         	call	_spi_Send_Read
  1142                           
  1143                           ;LCD_SPI.c: 25: spi_Send_Read(0x00);
  1144  0010E4  0E00               	movlw	0
  1145  0010E6  EC92  F008         	call	_spi_Send_Read
  1146                           
  1147                           ;LCD_SPI.c: 26: LATDbits.LATD3 = 1;
  1148  0010EA  868C               	bsf	3980,3,c	;volatile
  1149  0010EC  0012               	return		;funcret
  1150  0010EE                     __end_of_clearDisplay:
  1151                           	opt stack 0
  1152                           tblptru	equ	0xFF8
  1153                           tblptrh	equ	0xFF7
  1154                           tblptrl	equ	0xFF6
  1155                           tablat	equ	0xFF5
  1156                           prodl	equ	0xFF3
  1157                           wreg	equ	0xFE8
  1158                           status	equ	0xFD8
  1159                           
  1160 ;; *************** function _readBusyFlag *****************
  1161 ;; Defined at:
  1162 ;;		line 93 in file "LCD_SPI.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;		None
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;  retValue        1    1[COMRAM] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      unsigned char 
  1169 ;; Registers used:
  1170 ;;		wreg, status,2, status,0, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1177 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1179 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1180 ;;Total ram usage:        1 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    1
  1183 ;; This function calls:
  1184 ;;		_spi_Send_Read
  1185 ;; This function is called by:
  1186 ;;		_clearDisplay
  1187 ;;		_displayCtrl
  1188 ;;		_putchLCD
  1189 ;;		_moveCursor
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text10
  1194  00110A                     __ptext10:
  1195                           	opt stack 0
  1196  00110A                     _readBusyFlag:
  1197                           	opt stack 27
  1198                           
  1199                           ;LCD_SPI.c: 95: unsigned char retValue;
  1200                           ;LCD_SPI.c: 97: LATDbits.LATD3 = 0;
  1201                           
  1202                           ;incstack = 0
  1203  00110A  968C               	bcf	3980,3,c	;volatile
  1204                           
  1205                           ;LCD_SPI.c: 98: spi_Send_Read(0xFC);
  1206  00110C  0EFC               	movlw	252
  1207  00110E  EC92  F008         	call	_spi_Send_Read
  1208                           
  1209                           ;LCD_SPI.c: 99: retValue = spi_Send_Read(0x00);
  1210  001112  0E00               	movlw	0
  1211  001114  EC92  F008         	call	_spi_Send_Read
  1212  001118  6E02               	movwf	readBusyFlag@retValue,c
  1213                           
  1214                           ;LCD_SPI.c: 100: LATDbits.LATD3 = 1;
  1215  00111A  868C               	bsf	3980,3,c	;volatile
  1216                           
  1217                           ;LCD_SPI.c: 101: _delay((unsigned long)((1)*(8000000/4000000.0)));
  1218  00111C  D000               	nop2		;2 cycle nop
  1219                           
  1220                           ;LCD_SPI.c: 102: return (retValue & 1);
  1221  00111E  5002               	movf	readBusyFlag@retValue,w,c
  1222  001120  0B01               	andlw	1
  1223  001122  0012               	return	
  1224  001124                     __end_of_readBusyFlag:
  1225                           	opt stack 0
  1226                           tblptru	equ	0xFF8
  1227                           tblptrh	equ	0xFF7
  1228                           tblptrl	equ	0xFF6
  1229                           tablat	equ	0xFF5
  1230                           prodl	equ	0xFF3
  1231                           wreg	equ	0xFE8
  1232                           status	equ	0xFD8
  1233                           
  1234 ;; *************** function _spi_Send_Read *****************
  1235 ;; Defined at:
  1236 ;;		line 11 in file "LCD_SPI.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;  byte            1    wreg     unsigned char 
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;  byte            1    0[COMRAM] unsigned char 
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      unsigned char 
  1243 ;; Registers used:
  1244 ;;		wreg, status,2
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1251 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1253 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1254 ;;Total ram usage:        1 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; This function calls:
  1257 ;;		Nothing
  1258 ;; This function is called by:
  1259 ;;		_clearDisplay
  1260 ;;		_displayCtrl
  1261 ;;		_putchLCD
  1262 ;;		_moveCursor
  1263 ;;		_readBusyFlag
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text11
  1268  001124                     __ptext11:
  1269                           	opt stack 0
  1270  001124                     _spi_Send_Read:
  1271                           	opt stack 28
  1272                           
  1273                           ;incstack = 0
  1274                           ;spi_Send_Read@byte stored from wreg
  1275  001124  6E01               	movwf	spi_Send_Read@byte,c
  1276                           
  1277                           ;LCD_SPI.c: 13: SSP2BUF = byte;
  1278  001126  C001  FF03         	movff	spi_Send_Read@byte,3843	;volatile
  1279  00112A                     l49:
  1280  00112A  010F               	movlb	15	; () banked
  1281  00112C  A11A               	btfss	26,0,b	;volatile
  1282  00112E  D7FD               	goto	l49
  1283                           
  1284                           ; BSR set to: 15
  1285                           ;LCD_SPI.c: 15: return SSP2BUF;
  1286  001130  010F               	movlb	15	; () banked
  1287  001132  5103               	movf	3,w,b	;volatile
  1288                           
  1289                           ; BSR set to: 15
  1290  001134  0012               	return		;funcret
  1291  001136                     __end_of_spi_Send_Read:
  1292                           	opt stack 0
  1293                           tblptru	equ	0xFF8
  1294                           tblptrh	equ	0xFF7
  1295                           tblptrl	equ	0xFF6
  1296                           tablat	equ	0xFF5
  1297                           prodl	equ	0xFF3
  1298                           wreg	equ	0xFE8
  1299                           status	equ	0xFD8
  1300                           tblptru	equ	0xFF8
  1301                           tblptrh	equ	0xFF7
  1302                           tblptrl	equ	0xFF6
  1303                           tablat	equ	0xFF5
  1304                           prodl	equ	0xFF3
  1305                           wreg	equ	0xFE8
  1306                           status	equ	0xFD8
  1307                           
  1308                           	psect	rparam
  1309  0000                     tblptru	equ	0xFF8
  1310                           tblptrh	equ	0xFF7
  1311                           tblptrl	equ	0xFF6
  1312                           tablat	equ	0xFF5
  1313                           prodl	equ	0xFF3
  1314                           wreg	equ	0xFE8
  1315                           status	equ	0xFD8


Data Sizes:
    Strings     6
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      11
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          250      0       0

Pointer List with Targets:

    putStringLCD@input	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_7(CODE[6]), STR_6(CODE[6]), STR_5(CODE[6]), STR_4(CODE[6]), 
		 -> STR_3(CODE[6]), STR_2(CODE[6]), STR_1(CODE[6]), 


Critical Paths under _main in COMRAM

    _main->_putStringLCD
    _putStringLCD->_putchLCD
    _putchLCD->_fliplr
    _moveCursor->_fliplr
    _initialisation_LCD->_displayCtrl
    _displayCtrl->_readBusyFlag
    _clearDisplay->_readBusyFlag
    _readBusyFlag->_spi_Send_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    2229
                                             10 COMRAM     1     1      0
                 _initialisation_LCD
                         _moveCursor
                       _putStringLCD
 ---------------------------------------------------------------------------------
 (1) _putStringLCD                                         6     4      2     733
                                              4 COMRAM     6     4      2
                           _putchLCD
 ---------------------------------------------------------------------------------
 (2) _putchLCD                                             1     1      0     195
                                              3 COMRAM     1     1      0
                             _fliplr
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (1) _moveCursor                                           5     1      4    1181
                                              3 COMRAM     5     1      4
                             _fliplr
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (3) _fliplr                                               3     3      0     105
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initialisation_LCD                                   0     0      0     314
                       _clearDisplay
                        _displayCtrl
                _initialisation_PORT
                 _initialisation_SPI
 ---------------------------------------------------------------------------------
 (2) _initialisation_SPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initialisation_PORT                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _displayCtrl                                          4     2      2     269
                                              2 COMRAM     4     2      2
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (2) _clearDisplay                                         0     0      0      45
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (3) _readBusyFlag                                         1     1      0      30
                                              1 COMRAM     1     1      0
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (3) _spi_Send_Read                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialisation_LCD
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _displayCtrl
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _initialisation_PORT
     _initialisation_SPI
   _moveCursor
     _fliplr
     _readBusyFlag
       _spi_Send_Read
     _spi_Send_Read
   _putStringLCD
     _putchLCD
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      B       B       1       11.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13           FA      0       0      31        0.0%
BANK13              FA      0       0      32        0.0%
BIGRAM             DF9      0       0      33        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Nov 30 13:29:19 2017

                           l9 0EF0                  ?_displayCtrl 0003                            l49 112A  
                _putStringLCD 0F90                   __CFG_BORV$1 000000                           l905 0F62  
                         l761 10A6                           l921 0FBA                           l739 10CC  
                         l907 0F6A                           l917 0F9A                           l891 0FFC  
                         u110 0F5E                           u147 1038                           u157 1046  
                         u167 1054                           wreg 000FE8                          STR_1 0E01  
                        STR_2 0E01                          STR_3 0E01                          STR_4 0E01  
                        STR_5 0E01                          STR_6 0E01                          STR_7 0E01  
                        _main 0E08                          prodl 000FF3                          start 0002  
               __CFG_IESO$OFF 000000                 __CFG_FOSC$FRC 000000                  ___param_bank 000010  
        __end_of_clearDisplay 10EE                   fliplr@input 0003             putStringLCD@input 0005  
                       ?_main 0001   __size_of_initialisation_LCD 001C   __size_of_initialisation_SPI 003E  
                       tablat 000FF5                         status 000FD8               __initialization 1136  
                __end_of_main 0EF2                        ??_main 000B                 __activetblptr 000001  
               ?_readBusyFlag 0001             spi_Send_Read@byte 0001                        _OSCCON 000FD3  
              __CFG_XINST$OFF 000000                 putchLCD@input 0004                __CFG_STVREN$ON 000000  
__size_of_initialisation_PORT 0040                        _fliplr 0EF2          __size_of_displayCtrl 0044  
              ??_readBusyFlag 0002                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8              __end_of_putchLCD 10CC  
                  __accesstop 0060       __end_of__initialization 1136         __size_of_clearDisplay 0022  
               ___rparam_used 000001                __pcstackCOMRAM 0001             moveCursor@address 0008  
                _clearDisplay 10CC                 putStringLCD@i 0009         __end_of_spi_Send_Read 1136  
                     ?_fliplr 0001             displayCtrl@cursor 0003                       _SSP2BUF 000F03  
        __end_of_readBusyFlag 1124                       __Hparam 0000                       __Lparam 0000  
                   ?_putchLCD 0001                  __psmallconst 0E00               __size_of_fliplr 0052  
              displayCtrl@BCD 0006                       __pcinit 1136                       __ramtop 0E00  
                     __ptext0 0E08                       __ptext1 0F90                       __ptext2 109C  
                     __ptext3 0F44                       __ptext4 0EF2                       __ptext5 10EE  
                     __ptext6 105E                       __ptext7 101E                       __ptext8 0FDA  
                     __ptext9 10CC    __end_of_initialisation_LCD 110A    __end_of_initialisation_SPI 109C  
        end_of_initialization 1136           _initialisation_PORT 101E                    _moveCursor 0F44  
                  ??_putchLCD 0004          ?_initialisation_PORT 0001                     _RPOR22_23 000E1D  
                   _RPOR24_25 000E1E          readBusyFlag@retValue 0002                     _TRISCbits 000F94  
                   _TRISDbits 000F95                 moveCursor@col 0006                 moveCursor@row 0004  
                  main@status 000B                 ??_displayCtrl 0005         ??_initialisation_PORT 0001  
               ?_putStringLCD 0005                __end_of_fliplr 0F44           start_initialization 1136  
       __size_of_readBusyFlag 001A                   ?_moveCursor 0004                ??_putStringLCD 0007  
                    ??_fliplr 0001           __end_of_displayCtrl 101E                  _readBusyFlag 110A  
            displayCtrl@blink 0004             __size_of_putchLCD 0030           __size_of_moveCursor 004C  
                 __smallconst 0E00            displayCtrl@display 0005        __size_of_spi_Send_Read 0012  
                    _LATDbits 000F8C            _initialisation_LCD 10EE            _initialisation_SPI 105E  
            __CFG_WDTPS$32768 000000           ?_initialisation_LCD 0001           ?_initialisation_SPI 0001  
                    _SSP2CON1 000F19                      _SSP2CON3 000F39                   _displayCtrl 0FDA  
                    _SSP2STAT 000F1A          ??_initialisation_LCD 0007          ??_initialisation_SPI 0001  
        __end_of_putStringLCD 0FDA                      __Hrparam 0000                      __Lrparam 0000  
                __Lsmallconst 0E00                 _spi_Send_Read 1124                 ?_clearDisplay 0001  
                    __ptext10 110A                      __ptext11 1124                  ??_moveCursor 0008  
               __size_of_main 00EA   __end_of_initialisation_PORT 105E                ?_spi_Send_Read 0001  
                    _putchLCD 109C                  _SSP2STATbits 000F1A            __end_of_moveCursor 0F90  
              ??_clearDisplay 0003                    _RPINR12_13 000E30         __size_of_putStringLCD 004A  
             ??_spi_Send_Read 0001  
